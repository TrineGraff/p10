F.df <- estFactors(X.df, ic=1)
F.df
?left_join
library(matrixcalc)
library(tidyverse)
data <- read.csv("/Users/louisenygaardchristensen/Documents/AAU/10. semester/transformed_data.csv")
X.df <- data[, -c(1)]
getFactor <- function(X, r) {
n.var <- ncol(X)
XTX <- crossprod(X)
X.eig <- eigen(XTX, symmetric = TRUE)
eig.vec <- X.eig$vectors
loadings <- eig.vec[, 1:r] * sqrt(n.var)
factors <- (X %*% loadings) / n.var
list.out <- list(
"factors" = factors,
"loading" = loadings
)
return(list.out)
}
estFactors <- function(X.df, ic = 1, trace = FALSE) {
X <- as.numeric(as.matrix(X.df[, -1]))
X <- scale(X)
n.obs <- nrow(X)
n.var <- ncol(X)
r.max <- floor(10*log10(n.var))
ics <- rep(NA, r.max)
for (r in 1:r.max) {
est.r <- getFactor(X, r)
F.r <- est.r$factors
L.r <- est.r$loading
if(ic == 1) {
penalty <- r * (n.var + n.obs) / (n.var * n.obs) * log((n.var * n.obs) / n.var + n.obs)
} else if (ic == 2) {
penalty <- r * (n.var + n.obs) / (n.var * n.obs) * log(min(n.var, n.obs))
} else if (ic == 3) {
penalty <- r * log(min(n.var, n.obs)) / min(n.var, n.obs)
} else {
stop("Invalid information criterion argument")
}
V.r <- matrix.trace(crossprod(X - tcrossprod(F.r, L.r))) / (n.obs * n.var)
ics[r] <- log(V.r) + penalty
if (trace) cat("r =", r, "\tV =", V.r, "\tIC =", ics[r], "\n")
}
r.opt <- which.min(ics)
est.opt <- getFactor(X, r.opt)
factors.opt <- est.opt$factors
colnames(factors.opt) <- paste("F", 1:r.opt, sep = "")
df.out <- data.frame(X.df[, 1], factors.opt) %>% tbl_df
return(df.out)
}
estFactors(X.df, ic = 1, trace = FALSE)
factorForecast <- function(y, X.df, lags.df, h, ic = 1) {
#n.obs <- X.df %>% dim %>% .[1]
#p.max <- lags.df %>% dim %>% .[2] - 1
n.obs <- nrow(X.df)
p.max <- ncol(X.df) - 1
F.df <- estFactors(X.df, ic)
#r <- dim(F.df)[2] - 1
r <- ncol(F.df) - 1
ones.df <- data.frame(X.df$dato, 1) %>% tbl_df
names(ones.df) <- c("dato", "skæring")
fit.resp <- y[(1+h):n.obs]
AICs <- rep(NA, (p.max+1))
for (p in 0:p.max) {
lags.p <- lags.df[, 1:(1+p)]
model.mat <- ones.df %>%
left_join(F.df, by = "dato") %>%
left_join(lags.p, by = "dato") %>%
select(-dato) %>% as.matrix
fit.mat <- model.mat[1:(n.obs-h), ]
beta <- solve(crossprod(fit.mat), crossprod(fit.mat, fit.resp))
resids <- fit.resp - fit.mat %>% beta
sigma2 <- mean(resids^2)
AICs[p+1] <- log(sigma2) + (n.obs + 2 * p) / n.obs
}
p.opt <- which.min(AICs) - 1
model.mat <- ones.df %>%
left_join(F.df, by = "dato") %>%
left_join(lags.df[, 1:(1+p.opt)], by = "dato") %>%
select(-dato) %>%
as.matrix
fit.mat <- model.mat[1:(n.obs-h), ]
beta = solve(crossprod(fit.mat), crossprod(fit.mat, fit.resp))
fc.vars <- drop(model.mat %>% tail(n = 1))
y.fc <- drop(fc.vars %*% beta)
list.out <- list(
"forecast" = y.fc,
"r" = r,
"p" = p.opt
)
return(list.out)
}
factorForecast(y, X.df, lags.df, h = 1, ic = 1)
y <- X.df$RPI
lags.df <- data.frame(X.df[, 1], y)
factorForecast(y, X.df, lags.df, h = 1, ic = 1)
data <- read.csv("/Users/louisenygaardchristensen/Documents/AAU/10. semester/transformed_data.csv")
X.df <- data[, -c(1)]
y <- X.df$RPI
benchmarkAIC <- function(y, X) {
AIC <- function(y, X, p) {
n.obs <- length(y)
X.p <- X[, 1:(p+1)]
beta.p <- solve(crossprod(X.p), crossprod(X.p, y))
AIC <- log(sigma2est) + (n.obs + 2 * p) / n.obs
return(AIC)
}
p.max <- 4L
AICs <- rep(NA, p.max)
for (p in 1:p.max) {
AICs[p] <- AIC(y, X, p)
}
return(AICs)
}
data <- read.csv("/Users/louisenygaardchristensen/Documents/AAU/10. semester/transformed_data.csv")
X.df <- data[, -1]
X <- X.df[, -1]
X
y <- X.df$RPI
benchmarkAIC(y, X)
data <- read.csv("/Users/louisenygaardchristensen/Documents/AAU/10. semester/transformed_data.csv")
y <- data$RPI
n.obs <- length(y)
ylag <- c(NA, y[1:(n.obs-1)])
ylag
y
benchmarkAIC(y, ylag)
tslag <- function(x, d=1)
{
x <- as.vector(x)
n <- length(x)
c(rep(NA,d),x)[1:n]
}
tslag(y, d = 10)
test <- tslag(y, d = 10)
tslag <- function(x, d=1)
{
c(rep(NA,d),x)[1:length(x)]
lag.matrix <- cbind(x, tslag(x, 1),)
}
test <- tslag(y, d = 10)
test <- tslag(y, d = 1)
lag.matrix <- cbind(tslag(x,1), tslag(x,2))
tslag <- function(x, d=1)
{
c(rep(NA,d),x)[1:length(x)]
}
lag.matrix <- cbind(tslag(x,1), tslag(x,2))
lag.matrix
install.packages("vars")
library(vars)
data("Canada")
Canada
VAR(Canada, p = 2, type = "both")
Canada
VAR(Canada, p = 2, type = "both")
tslag <- function(x, d=1)
{
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d),x)[1:length(x)]
lag.matrix <- cbind(lag.vector[d])
}
return(lag.matrix)
}
test <- tslag(y, d = 10)
tslag <- function(x, d=1)
{
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d),x)[1:length(x)]
lag.matrix <- cbind(lag.vector[d])
}
return(lag.matrix)
}
test <- tslag(y, d = 10)
tslag <- function(x, d=1)
{
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d),x)[1:length(x)]
}
lag.matrix <- cbind(lag.vector[d])
return(lag.matrix)
}
test <- tslag(y, d = 10)
tslag <- function(x, d=1)
{
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d),x)[1:length(x)]
}
return(lag.vector)
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
test <- tslag(y, d = 10)
y
tslag <- function(x, d=1)
{
for (d in 1:length(x) - 1) {
lag.vector[d] <- c(rep(NA,d),x)[1:length(x)]
}
return(lag.vector)
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
test <- tslag(y, d = 10)
c(rep(NA,d), x)[1:length(x)]
c(rep(NA,10), y)[1:length(y)]
c(rep(NA,100), y)[1:length(y)]
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
return(lag.vector)
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
test <- tslag(y, d = 10)
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
lag.matrix <- cbind(lag.vector[d])
return(lag.matrix)
}
test <- tslag(y, d = 10)
test
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
lag.matrix <- cbind(lag.vector[d])
return(lag.matrix)
}
tslag(y,10)
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
return(lag.vector[d])
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
tslag(y,10)
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
cat("d =", d, "\tlag =", lag.vector[r], "\n")
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
tslag(y,10)
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
cat("d =", d, "\tlag =", lag.vector[d], "\n")
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
tslag(y,10)
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- 1
#lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
}
cat("d =", d, "\tlag =", lag.vector[d], "\n")
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
tslag(y,10)
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- 1
#lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
cat("d =", d, "\tlag =", lag.vector[d], "\n")
}
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
tslag(y,10)
tslag <- function(x, d)
{
lag.vector <- rep(NA, length(x))
for (d in 1:length(x)) {
lag.vector[d] <- c(rep(NA,d), x)[1:length(x)]
cat("d =", d, "\tlag =", lag.vector[d], "\n")
}
#lag.matrix <- cbind(lag.vector[d])
#return(lag.matrix)
}
tslag(y,10)
lagmatrix <- function(x,max.lag){embed(c(rep(NA,max.lag),x),max.lag)}
lag <- function(x,lag) {
out<-lagmatrix(x,lag+1)[,lag]
return(out[1:length(out)-1])
}
lag(y, 10)
test <- lag(y, 10)
test
ylag <- c(NA, y[1:(n.obs-1)])
ylag
ylag.2 <- c(NA, y[1:(n.obs-2)])
ylag.2
lag <- c(rep(NA, lag.order), y[1:n.obs])
lag.order = 3
lag <- c(rep(NA, lag.order), y[1:n.obs])
lag
lag <- c(rep(NA, lag.order), y[1:n.obs - lag.order])
lag.order = 3
lag <- c(rep(NA, lag.order), y[1:(n.obs - lag.order)])
lag
lag.order = 3
for (p in 1:lag.order) {
lag[p] <- c(rep(NA, p), y[1:(n.obs - p)])
}
lag.order = 3
for (p in 1:lag.order) {
lag[p] <- c(rep(NA, p), y)[1:n.obs]
#lag[p] <- c(rep(NA, p), y[1:(n.obs - p)])
}
lag.order = 3
lag <- rep(NA, n.obs)
for (p in 1:lag.order) {
lag[p] <- c(rep(NA, p), y)[1:n.obs]
#lag[p] <- c(rep(NA, p), y[1:(n.obs - p)])
}
lag.order = 3
lag <- rep(NA, n.obs)
for (p in 1:lag.order) {
lag[p] <- c(rep(NA, p), y)[1:n.obs]
#lag[p] <- c(rep(NA, p), y[1:(n.obs - p)])¨
print(lag[p])
}
c(rep(NA, 1), y[1:(n.obs - 1)]
c(rep(NA, 1), y[1:(n.obs - 1)])
y
c(rep(NA, 1), y[1:(n.obs - 1)])
c(rep(NA, 2), y[1:(n.obs - 2)])
usq<-0
for(i in 1:10)
{
usq[i]<-u1[i]*u1[i] # i-th element of u1 squared into i-th position of usq
print(usq[i])
}
usq<-0
u1 <- rnorm(30)
for(i in 1:10)
{
usq[i]<-u1[i]*u1[i] # i-th element of u1 squared into i-th position of usq
print(usq[i])
}
usq<-0
u1 <- rnorm(30)
for(i in 1:10)
{
usq[i]<c(-u1[i]*u1[i], 0) # i-th element of u1 squared into i-th position of usq
print(usq[i])
}
for(i in 1:10)
{
usq[i]<c(-u1[i]*u1[i], 0) # i-th element of u1 squared into i-th position of usq
as.vector(usq[i])
}
print(i)
for(i in 1:10)
{
usq[i]<cbind(-u1[i]*u1[i], 0) # i-th element of u1 squared into i-th position of usq
usq[i]
}
print(i)
lag <- c(NA, n.obs)
lag
lag <- as.vector(rep(NA, n.obs))
lag
lag.order = 3
lag <- as.vector(rep(NA, n.obs))
for (p in 1:lag.order) {
lag[p] <- c(rep(NA, p), y[1:(n.obs - p)])
print(lag[p])
}
lag.order = 3
lag <- as.vector(rep(NA, n.obs))
for (p in 1:lag.order) {
lag[p] <- as.vector(c(rep(NA, p), y[1:(n.obs - p)]))
}
p = 3
c(rep(NA, p), y[1:(n.obs - p)])
as.vector(c(rep(NA, p), y[1:(n.obs - p)]))
lag.order = 3
lag <- as.vector(rep(NA, n.obs))
for (p in 1:lag.order) {
lag[p] <- c(rep(NA, p), y[1:(n.obs - p)])
sapply(lag, as.vector)
}
?apply
apply(y, 2, c(rep(NA, p), y[1:(n.obs - p)]))
lag <- function(y, lag.order) {
c(rep(NA, lag.order), y[1:(n.obs - lag.order)])
}
lag(y,3)
apply(y, 2, lag(y,3))
library(matrixcalc)
library(tidyverse)
data <- read.csv("/Users/louisenygaardchristensen/Documents/AAU/10. semester/transformed_data.csv")
X.df <- data[, -c(1)]
X.df
getFactor <- function(X, r) {
n.var <- ncol(X)
XTX <- crossprod(X)
X.eig <- eigen(XTX, symmetric = TRUE)
eig.vec <- X.eig$vectors
loadings <- eig.vec[, 1:r] * sqrt(n.var)
factors <- (X %*% loadings) / n.var
list.out <- list(
"factors" = factors,
"loading" = loadings
)
return(list.out)
}
estFactors <- function(X.df, ic = 1, trace = FALSE) {
X <- as.numeric(as.matrix(X.df[, -1]))
X <- scale(X)
n.obs <- nrow(X)
n.var <- ncol(X)
r.max <- floor(10*log10(n.var))
ics <- rep(NA, r.max)
for (r in 1:r.max) {
est.r <- getFactor(X, r)
F.r <- est.r$factors
L.r <- est.r$loading
if(ic == 1) {
penalty <- r * (n.var + n.obs) / (n.var * n.obs) * log((n.var * n.obs) / n.var + n.obs)
} else if (ic == 2) {
penalty <- r * (n.var + n.obs) / (n.var * n.obs) * log(min(n.var, n.obs))
} else if (ic == 3) {
penalty <- r * log(min(n.var, n.obs)) / min(n.var, n.obs)
} else {
stop("Invalid information criterion argument")
}
V.r <- matrix.trace(crossprod(X - tcrossprod(F.r, L.r))) / (n.obs * n.var)
ics[r] <- log(V.r) + penalty
if (trace) cat("r =", r, "\tV =", V.r, "\tIC =", ics[r], "\n")
}
r.opt <- which.min(ics)
est.opt <- getFactor(X, r.opt)
factors.opt <- est.opt$factors
colnames(factors.opt) <- paste("F", 1:r.opt, sep = "")
df.out <- data.frame(X.df[, 1], factors.opt) %>% tbl_df
return(df.out)
}
estFactors(X.df, ic = 1, trace = FALSE)
transformed_data <- read.csv("/Users/LouiseNygaardChristensen/Desktop/P10/R/data/transformed_data.csv")
head(transformed_data)
tail(transformed_data)
iris
pcr_model <- pcr(X.df$RPI~., data = X.dk, scale = TRUE, validation = "CV")
library(pls)
install.packages(pls)
install.packages("tidyverse")
library("tidyverse")
mcs80_TR <- readRDS("mcs80.rds")
setwd("~/Desktop/p10/R/unrate/mcs")
mcs80_TR <- readRDS("mcs80.rds")
mcs90_TR <- readRDS("mcs90.rds")
install.packages("MCS")
library(MCS)
mcs80_TR <- readRDS("mcs80.rds")
mcs90_TR <- readRDS("mcs90.rds")
mcs95_TR <- readRDS("mcs95.rds")
mcs80_Tmax <- readRDS("mcs80_Tmax.rds")
mcs90_Tmax <- readRDS("mcs90_Tmax.rds")
mcs95_Tmax <- readRDS("mcs95_Tmax.rds")
models <- c("AR(4)",
"Faktor model (IC1)", "Faktor model (IC2)", "Faktor model (IC3)",
"lasso (CV)", "lasso (BIC)",
"ridge regression (CV)", "ridge regression (BIC)",
"Group lasso (CV)", "Group lasso (BIC)",
"Adaptive lasso m. OLS (CV)", "Adaptive lasso m. OLS (BIC)",
"Adaptive lasso m. lasso (CV)", "Adaptive lasso m. lasso (BIC)",
"LARS u. lasso modifikation (CV)", "LARS u. lasso modifikation (BIC)",
"LARS m. lasso modifikation (CV)", "LARS m. lasso modifikation (BIC)")
mcs80_TR
mcs80_TR <- readRDS("mcs80.rds")
mcs80_TR
mcs90_TR <- readRDS("mcs90.rds")
mcs90_TR
mcs80_TR
mcs90_Tmax <- readRDS("mcs90_Tmax.rds")
mcs80_Tmax <- readRDS("mcs80_Tmax.rds")
mcs80_Tmax
mcs90_TR <- readRDS("mcs90.rds")
mcs90_TR

ylab("Sample kvantil") +
ggtitle("Normal Q-Q plot")
}
qqnorm.plot(p)
p
?covTest
getAnywhere(covTest)
pexp(p, 1)
plot(pexp(p, 1))
plot(pexp(p, 1), p)
getAnywhere(covTest)
?pexp
pexp(p, 2)
pexp(p, 1)
dexp(p, 1)
plot(dexp(p, 1))
plot(dexp(p, 1), p)
pexp(p, 1)
null.dist = "Exp(1)"
getAnywhere(covTest)
pf(p, 2, 548-126)
plot(pf(p, 2, 548-126), p)
?pf
?covTest
p
p[1]
p[1]
nu = p[1]
plot(qexp(1),nu)
plot(df(x = nu, df1 = 2, df2 = 422), type = "l")
library(lars)
library(covTest)
library(selectiveInference)
crime <- read.csv("crime.csv")
setwd("~/Desktop/Projekt/R/crime")
crime <- read.csv("crime.csv")
head(crime)
set.seed(1)
y <- scale(crime[, 6], center = TRUE, scale = FALSE) # crimerate
X <- scale(as.matrix(crime[, 1:5]), center = TRUE, scale = TRUE)
# lasso
fit <- glmnet(X, y, alpha = 1)
cvfit <- cv.glmnet(X, y, alpha = 1)
plot(cvfit)
# Plottet indkluderer kryds-validerings kurven (røde stiplede linje) og øvre og nedre standard
# afvigelses kurve langs x-aksen (error bars).
# To valgte λ’er er indikeret af lodrette stiplede linjer
(lambda_min <- cvfit$lambda.min)
# lambda.min er værdien af λ som giver den minste mean kryds-valierings fejl (misclassification error)
(lambda_1se <- cvfit$lambda.1se)
data.frame(
name = c("min", "1se"),
lambda = c(cvfit$lambda.min, cvfit$lambda.1se),
error = c(cvfit$cvm[which(cvfit$lambda == lambda_min)],
cvfit$cvm[which(cvfit$lambda == lambda_1se)]),
p = c(sum(coef(fit, s = lambda_min) != 0),
sum(coef(fit, s = lambda_1se) != 0))
)
# For de indkluderede parametre har vi følgende estimater
beta_hat <- coef(fit, s = lambda_1se)
idx_hat <- which(beta_hat != 0)
beta_hat[idx_hat, ]
# Klassifikation fejlen (krydsvaliderings fejlen) for insample prediction med disse parametre er
prediction <- as.vector(predict(fit, X, lambda_1se, type = "class"))
misclassified = (prediction != y)
mean(misclassified) # 1??? (for begge lambda'er)
object <- lars(X, y, type = "lasso")
plot(object)
fits <- predict.lars(object, X, type = "fit")
obejct_Test <- covTest(object, x = X, y = y)
obejct_Test
lar(X, y)
lar_fit = lar(X, y)
larInf(lar_fit, alpha = 0.01)
X[,1]
X
fit0=glm(y~ X[,2],family="gaussian")
sfit0 = summary(fit0)
sfit0
coef0 = fit0$coef[-1]
coef0
se0 = sqrt(diag(sfit0$cov.scaled))
zscore = coef0/se0
zscore
sqrt(diag(sfit0$cov.scaled))
se0 = sqrt(diag(sfit0$cov.scaled))[,2]
se0 = sqrt(diag(sfit0$cov.scaled))[2]
zscore = coef0/se0
zscore
larinf = larInf(lar_fit, alpha = 0.01)
larinf
obejct_Test
156.727 - mean(X[,1])
156.727 - mean(X[,1])/ obejct_Test$sigma
obejct_Test$sigma
(156.727 - mean(X[,1]))/ obejct_Test$sigma
object$mu
mean(X[,1]))
mean(X[,1])
object$Gram
lar_fit$intercept
lar_fit = lar(X, y, intercept = FALSE)
lar_fit$bls
larinf
?lar_fit
?lar
setwd("~/Desktop/Projekt/R/unrate")
source("shrinkage_metoder/coordinate/lasso/krydsvalidering/insample.R")
source("shrinkage_metoder/coordinate/lasso/krydsvalidering/insample.R")
beta = coef(lasso_fit, s = lasso_cv$lambda.1se/n)[-1]
lasso_cv$lambda.1se
n <- length(y_train)
beta = coef(lasso_fit, s = lasso_cv$lambda.1se/n)[-1]
fixedLassoInf(x_train, y_train, beta, lambda, intercept = FALSE, alpha = 0.1)
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se, intercept = FALSE, alpha = 0.1)
beta
lasso_Fit
lasso_fit
beta = coef(lasso_fit, s = lasso_cv$lambda.1se/n)[-1]
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se, intercept = FALSE, alpha = 0.1)
lambda = lasso_cv$lambda.1se*n
beta = coef(lasso_fit, s = lambda/n)[-1]
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se, intercept = FALSE, alpha = 0.1)
length(y_train)
lambda
beta
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se, intercept = FALSE, alpha = 0.1)
coef(lasso_fit, s = lambda/n)
beta
beta_nu = coef(lasso_fit, s = lasso_cv$lambda.1se)[-1]
beta_nu
identical(beta, beta_nu)
?fixedLassoInf
beta = coef(lasso_fit, s = lambda)[-1]
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se, intercept = FALSE, alpha = 0.1)
beta = coef(lasso_fit, s = lambda/n)[-1]
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se, intercept = FALSE, alpha = 0.1)
beta = coef(lasso_fit, s = lambda/n)[-1]
beta
lambda = lasso_cv$lambda.1se
beta = coef(lasso_fit, s = lambda/n)[-1]
beta
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se, intercept = FALSE, alpha = 0.1)
lambda = 0.8
lambda = .8
lambda
beta = coef(lasso_fit, s = lambda/n)[-1]
beta
fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
lasso_cv$lambda.1se
fixedLassoInf(x_train, y_train, beta_nu, lasso_cv$lambda.1se,
intercept = FALSE, alpha = 0.1)
source("shrinkage_metoder/coordinate/lasso/krydsvalidering/insample.R")
n <- length(y_train)
lasso_fit
lambda = lasso_cv$lambda.1se
beta = coef(lasso_fit, s = lambda/n)[-1]
beta_nu = coef(lasso_fit, s = lasso_cv$lambda.1se)[-1]
beta_nu
lambda = lasso_cv$lambda.1se * n
beta = coef(lasso_fit, s = lambda/n)[-1]
fixedLassoInf(x_train, y_train, beta, lasso_cv$lambda.1se,
intercept = FALSE, alpha = 0.1)
fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
lambda = lasso_cv$lambda.1se
beta_nu = coef(lasso_fit, s = lasso_cv$lambda.1se/n)[-1]
fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
lambda = lasso_cv$lambda.1se * n
beta_nu = coef(lasso_fit, s = lasso_cv$lambda.1se)[-1]
identical(beta, beta_nu)
fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
source("shrinkage_metoder/coordinate/lasso/krydsvalidering/insample.R")
n <- length(y_train)
lasso_fit
lambda = lasso_cv$lambda.1se * n
beta_nu = coef(lasso_fit, s = lasso_cv$lambda.1se)[-1]
fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
lambda = lasso_cv$lambda.1se * n
beta_nu = coef(lasso_fit, s = lasso_cv$lambda.1se)[-1]
fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
beta = coef(lasso_fit, s = lasso_cv$lambda.1se)[-1]
fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
fixed_lasso = fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.1)
fixed_lasso$vlo
fixed_lasso$ci
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0)
fixed_lasso$coef0
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14)
df
ggplot(df, aes(df$fixed_lasso.coef0 ,df$var)) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1))
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1))
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red")
idx_beta = which(beta!= 0)
idx_beta
lm = lm(y_train~ 0 +x_train[,idx_beta])
?lm
confint(lm)
df$var
fixed_lasso
confint(lm)
x_train[,3]
colnames(x_train)[3]
fixed_lasso
idx_beta = which(beta!= 0)
idx_beta
cf_lm = confint(lm)
cf_lm
cf_lm = confint(lm)[,2:3]
cf_lm = confint(lm)[,2]
cf_lm
cf_lm = as.matrix(confint(lm))
cf_lm
cf_lm = as.matrix(confint(lm))[,2]
cf_lm
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
df
cf_lm = as.matrix(confint(lm))
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
df
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X2.5..,
ymax = df$X97.5.., width = .1), col = "red"))
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X2.5..,
ymax = df$X97.5.., width = .1), col = "black")
?confint
cf_lm = as.matrix(confint(lm), level = 0.90)
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
df
cf_lm
cf_lm = as.matrix(confint(lm), level = 0.95)
cf_lm
cf_lm = as.matrix(confint(lm, level = 0.9))
cf_lm
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X..,
ymax = df$X97.5.., width = .1), col = "black")
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95...., width = .1), col = "black")
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black")
cf_lm
?confint
?fixedLassoInf
cf_lm = as.matrix(confint(lm, level = 0.8))
cf_lm
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X10..,
ymax = df$X90.., width = .1), col = "black")
fixed_lasso = fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.5)
lm = lm(y_train~ 0 +x_train[,idx_beta])
cf_lm = as.matrix(confint(lm, level = 0.9))
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X10..,
ymax = df$X90.., width = .1), col = "black")
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, lm_cf = cf_lm)
df
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = 1:14, cf_lm)
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$..,
ymax = df$X90.., width = .1), col = "black")
ggplot(df, aes(df$var,df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black")
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = colnames(x_train[,idx_hat]), cf_lm)
df
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = colnames(x_train[,idx_hat -1]), cf_lm)
df
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black")
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = Variabler, y = "Koefficient", color = "")
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient", color = "")
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient", color = "")
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient", color = c("OLS", "Lasso"))
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "OLS") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "LASSO") +
labs(x = "Variabler", y = "Koefficient", color = c("OLS", "Lasso"))
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), color = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), color = "black") +
labs(x = "Variabler", y = "Koefficient")
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
library(lars)
# data med n = 442 og 3 variable, som anvendes i Efrons paper
data("diabetes")
head(diabetes)
attach(diabetes)
x # matrix med 10 kolonner
y # numerisk vektor
x2 # matrix med 64 kolonner
cv.lars(x2, y, trace = TRUE, max.steps = 80)
detach(diabetes)
par(mfrow=c(2,2))
attach(diabetes)
object <- lars(x,y)
plot(object)
object2 <- lars(x,y,type="lar")
plot(object2)
object3 <- lars(x,y,type="for") # Can use abbreviations
plot(object3)
detach(diabetes)
attach(diabetes)
object <- lars(x,y)
plot(object)
detach(diabetes)
plot.lars(object, xvar = "norm", plottype = "coefficients") # default
plot.lars(object, xvar = "df", breaks = TRUE, plottype = "coefficients")
plot.lars(object, xvar = "step", breaks = TRUE, plottype = "coefficients")
plot.lars(object, xvar = "arc.length", breaks = TRUE, plottype = "coefficients")
plot.lars(object, xvar = "step", breaks = TRUE, plottype = "Cp")
attach(diabetes)
object <- lars(x, y, type="lasso")
### make predictions at the values in x, at each of the
### steps produced in object
fits <- predict.lars(object, x, type="fit")
### extract the coefficient vector with L1 norm=4.1
coef4.1 <- coef(object, s=4.1, mode="norm") # or
coef4.1 <- predict(object, s=4.1, type="coef", mode="norm")
detach(diabetes)
attach(diabetes)
object <- lars(x,y)
summary(object)
detach(diabetes)
diabetes
source("shrinkage_metoder/coordinate/lasso/krydsvalidering/insample.R")
n <- length(y_train)
lambda = lasso_cv$lambda.1se * n
beta = coef(lasso_fit, s = lasso_cv$lambda.1se)[-1]
idx_beta = which(beta!= 0)
fixed_lasso = fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.5)
##plotter intervallet for lasso og ols koefficienten.
lm = lm(y_train~ 0 +x_train[,idx_beta])
cf_lm = as.matrix(confint(lm, level = 0.9))
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = colnames(x_train[,idx_hat -1]), cf_lm)
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = colnames(x_train[,idx_hat -1]), cf_lm)
df
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
df
df[3,]
df[4,]
df_ny = df[-c(4,5),]
ggplot(df_ny, aes(df_ny$var, df_ny$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df_ny$X1,
ymax = df_ny$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df_ny$X5..,
ymax = df_ny$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
ggplot(df_ny, aes(df_ny$var, df_ny$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df_ny$X1,
ymax = df_ny$X2, width = 0), col = "red") +
geom_errorbar(aes(ymin = df_ny$X5..,
ymax = df_ny$X95.., width = 0), col = "black") +
labs(x = "Variabler", y = "Koefficient")
ggplot(df_ny, aes(df_ny$var, df_ny$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df_ny$X1,
ymax = df_ny$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df_ny$X5..,
ymax = df_ny$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
ggplot(df_ny, aes(df_ny$var, df_ny$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df_ny$X1,
ymax = df_ny$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df_ny$X5..,
ymax = df_ny$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
setwd("~/Desktop/Projekt/R/diabetes")
diabetes <- read.csv("diabetes.csv")
diabetes <- read.csv("diabetes.csv")
diabetes
diabetes_design <- model.matrix(prog ~ . - 1, data = diabetes)
# y = prog, og vi har fjernet intercept
diabetes_design_std <- scale(diabetes_design, center = TRUE, scale = TRUE)
y <- diabetes$prog - mean(diabetes$prog)
diabetes_design_std
# y = prog, og vi har fjernet intercept
x <- scale(diabetes_design, center = TRUE, scale = TRUE)
y <- diabetes$prog - mean(diabetes$prog)
n <- length(y)
glmnet(y, x, intercept = FALSE, standardize = FALSE, alpha = 1)
y
x
y
x
glmnet(x, y, intercept = FALSE, standardize = FALSE, alpha = 1)
fit = glmnet(x, y, intercept = FALSE, standardize = FALSE, alpha = 1)
cv.glmnet(x, y, intercept = FALSE, standardize = FALSE, alpha = 1)
cv = cv.glmnet(x, y, intercept = FALSE, standardize = FALSE, alpha = 1)
cv$lambda.min
coef(fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se))
coef(fit, s = c(cv$lambda.min, cv$lambda.1se))
lambda = coef(fit, s = cv$lambda.1se)
n <- length(y)
lambda = cv$lambda.1se * n
beta = coef(lasso_fit, s = cv$lambda.1se)[-1]
beta = coef(fit, s = cv$lambda.1se)[-1]
idx_beta = which(beta!= 0)
fixed_lasso = fixedLassoInf(x_train, y_train, beta, lambda = lambda,
intercept = FALSE, alpha = 0.5)
fixed_lasso = fixedLassoInf(x, y, beta, lambda = lambda,
intercept = FALSE, alpha = 0.5)
fixed_lasso
idx_beta
##plotter intervallet for lasso og ols koefficienten.
lm = lm(y_train~ 0 +x[,idx_beta])
##plotter intervallet for lasso og ols koefficienten.
lm = lm(y~ 0 +x[,idx_beta])
cf_lm = as.matrix(confint(lm, level = 0.9))
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = colnames(x_train[,idx_hat -1]), cf_lm)
beta
coef(fit, s = cv$lambda.1se)
idx_beta = which(beta!= 0)
colnames(x[,idx_hat])
colnames(x[,idx_beta])
df = data.frame(fixed_lasso$ci, fixed_lasso$coef0, var = colnames(x[,idx_beta]), cf_lm)
df
ggplot(df, aes(df$var, df$fixed_lasso.coef0 )) +
geom_errorbar(aes(ymin = df$X1,
ymax = df$X2, width = .1), col = "red") +
geom_errorbar(aes(ymin = df$X5..,
ymax = df$X95.., width = .1), col = "black") +
labs(x = "Variabler", y = "Koefficient")
?glmnet

ggtitle("Lasso") + scale_color_manual(labels = c(expression(lambda[min]), expression(lambda[1][sd])), values = c("blue", "brown"))
ggplot(df_la, aes(df_la$lars_cv.index,df_la$lars_cv.cv)) +
geom_errorbar(aes(ymin = df_la$lars_cv.cv + df_la$lars_cv.cv.error,
ymax = df_la$lars_cv.cv - df_la$lars_cv.cv.error, width = .1)) +
geom_point(col = "red") +
labs(x = "Fraktion af sidste L1 norm", y = "MSE", color = "") +
geom_vline(aes(xintercept= l1_min, col = "blue"), linetype="dotted") +
geom_vline(aes(xintercept= l1_1se, col = "brown"), linetype="dotted") +
ggtitle("Lasso") + scale_color_manual(labels = c(expression(lambda[min]), expression(lambda[1][sd])), values = c("blue", "brown"))
c <- tidy(coef(lars_, s= l1_1se))
library(broom)
c <- tidy(coef(lars_, s= l1_1se))
c <- tidy(coef(lars_, s= "l1_1se"))
c <- tidy(coef(lars_, s = l1_min, mode = "fraction")))
c <- tidy(coef(lars_, s = l1_min, mode = "fraction"))
write.csv(c, file = "results")
c <- tidy(coef(lars_, s = l1_min, mode = "fraction"), lars_)
write.csv(c, file = "results_lars")
write.csv(c, file = "results_lars")
lars <- tidy(coef(lars_, s = l1_min, mode = "fraction"), lars_)
write.csv(lars, file = "results_lars")
lars <- tidy(coef(lars_, s = l1_min, mode = "fraction"), lars_)
write.csv(lars, file = "results_lars")
lars <- tidy(coef(lars_, s = l1_min, mode = "fraction"))
write.csv(lars, file = "results_lars")
min <- min(lars_cv$cv)
idmin = match(min, lars_cv$cv)
l1_min = lars_cv$index[idmin]
se = (lars_cv$cv + lars_cv$cv.error)[idmin]
idse = lars_cv$cv <= se #større eller lig med en standard afvigelse
l1_1se = max(lars_cv$index[idse], na.rm = TRUE)
match(lars_cv$index, l1_1se)
data.frame(
lambda = c("min", "1se"),
vaedi = c(l1_min, l1_1se),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min, mode = "fraction")), parm(coef(lars_, s = l1_1se, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
lars <- tidy(coef(lars_, s = l1_min, mode = "fraction"))
write.csv(lars, file = "results_lars")
library(broom)
lars <- tidy(coef(lars_, s = l1_min, mode = "fraction"))
write.csv(lars, file = "results_lars")
sink("lars.txt")
coef(lars_, s = l1_min, mode = "fraction")
sink()
?tidy
write.csv(lars_cv, file = "results_lars")
write.csv(lars_cvhh, file = "results_lars")
?write.csv
write.csv(lars_cv, file = "lars_cv")
write.csv(coef(lars_, s = l1_min, mode = "fraction"), file = "result_lars")
source("/Users/trinegraff/Desktop/Projekt/R/unrate/result/cv_lars.R")
source("/Users/trinegraff/Desktop/Projekt/R/unrate/results/cv_lars.R")
read.csv("/results/cv_lars")
read.csv("/results/cv_lars.csv")
read.csv("/results/lars_cv.csv")
read.csv("results/lars_cv.csv")
read.csv("/Users/trinegraff/Desktop/Projekt/R/data/results/lars_cv.csv")
source("/Users/trinegraff/Desktop/Projekt/R/data/setup_data.R")
read.csv("lars_cv.csv")
read.csv("/Users/trinegraff/Desktop/Projekt/R/data/unrate/lars_cv.csv")
read.csv("lars_cv.csv")
read.csv("lars_cv.csv")
setwd("~/Desktop/Projekt/R/unrate")
read.csv("lars_cv.csv")
setwd("~/Desktop/Projekt/R/unrate")
read.csv("lars_cv.csv")
read.csv("results/lars_cv.csv")
read.csv("results/result_lars.csv")
beta = read.csv("results/result_lars.csv")
data.matrix(beta)
x = data_train[ , !(colnames(data_test) %in% drops)]
# testsæt
drops = c("UNRATE")
x = data_train[ , !(colnames(data_test) %in% drops)]
y = data$UNRATE[1:idx]
y = data$UNRATE[idx,]
y = data$UNRATE[idx:]
y = data$UNRATE[idx:,]
y = data$UNRATE[idx:lenght(x)]
length(x)
rowlength(x)
collength(x)
length(col(x))
length(row(x))
y = data$UNRATE[idx:]
y = data$UNRATE[idx:,]
y = data_train$UNRATE
read.csv("results/lars_cv.csv")
beta = read.csv("results/result_lars.csv")
?predict
?se.fit
se.fit
predict.lasso
predict.glm
y = data_train$UNRATE[idx:,]
setwd("~/Desktop/Projekt/R/unrate")
read.csv("results/lars_cv.csv")
beta = read.csv("results/result_lars.csv")
beta
as.vector(beta)
beta[nonzeroes]
n.zero = which(!isZero(beta))
n.zero = parm(beta)
parm = function(x) {
(sum(x != 0))
}
n.zero = parm(beta)
n.zero
beta
n.zero = parm(beta$x)
n.zero
n.zero = which(!isZero(beta$x))
n.zero = which(!parm(beta$x))
n.zero
beta = beta_hat
beta_hat = beta
which(b_hat != 0)
which(beta_hat$x!= 0)
idx_beta = which(beta_hat$x!= 0)
colnames(x)[idx_beta]
beta_hat = beta$x[idx_beta]
beta_hat
beta_hat = beta[idx_beta]
beta_hat = beta[idx_beta,]
beta_hat
colnames(x)[idx_beta]
x
is.dataframe(x)
is.dataframe(x)
is.data.frame(x)
as.data.frame(x)
df_x = as.data.frame(x)
library(tidyverse)
idx_beta
fc.var <- df_x %>% tail(n = 1) %>% select(idx_beta)
fc.var
lars_ = lars(x, y, type = "lasso")
y.fc = drop(as.matrix(fc.var) %>% beta_hat)
beta_hat = beta[idx_beta,]
beta_hat
y.fc = drop(as.matrix(fc.var) %>% beta_hat$x)
fc.var
Lasso_fc = function(x, y, h, lambda.opt){
n.obs = length(y)
fc.y = y[(1+h):n.obs]
fc.vars = as.matrix(x[(1:n.obs - h), ])
}
Lasso_fc(x,y,1)
Lasso_fc = function(x, y, h, lambda.opt){
n.obs = length(y)
fc.y = y[(1+h):n.obs]
fc.vars = as.matrix(x[(1:n.obs - h), ])
print(fc.vars)
}
Lasso_fc(x,y,1)
glmnet(x,y)
library(glmnet)
glmnet(x,y)
f = glmnet(x,y)
f$a0
?glmnet
f = glmnet(x,y, intercept = F)
f
?predict.glmnet
glmnet::predict(x,y)
cv_lars = read.csv("results/lars_cv.csv")
fc.y = y[(1+h):n.obs]
h = 1
fc.y = y[(1+h):n.obs]
n.obs = length(y)
h = 1
fc.y = y[(1+h):n.obs]
fc.vars = as.matrix(x[(1:n.obs - h), ])
fc.y
length(fc.y)
length(y)
fc.vars = as.matrix(x[(1:n.obs - h), ])
fc.vars
fc.vars[,2]
# insample ----------------------------------------------------------------
min <- min(lars_cv$cv)
lars_cv = read.csv("results/lars_cv.csv")
# insample ----------------------------------------------------------------
min <- min(lars_cv$cv)
min
lambda.opt = min
beta_opt = beta
beta
n.zero = which(b_opt != 0)
n.zero = which(beta_opt != 0)
n.zero
beta_opt
n.zero
source("/Users/trinegraff/Desktop/Projekt/R/data/setup_data.R")
setwd("~/Desktop/Projekt/R/unrate")
lars_cv = read.csv("results/lars_cv.csv")
beta = read.csv("results/result_lars.csv")
drops = c("UNRATE")
x = data_train[ , !(colnames(data_train) %in% drops)]
y = data$UNRATE[1:idx]
parm = function(x) {
(sum(x != 0))
}
# insample ----------------------------------------------------------------
min <- min(lars_cv$cv)
idmin = match(min, lars_cv$cv)
l1_min = lars_cv$index[idmin]
n.obs = length(y)
h = 1
fc.y = y[(1+h):n.obs] #fjerner en observation
fc.vars = as.matrix(x[(1:n.obs - h), ]) #fjerner en observation
lambda.opt = min
beta_opt = beta
n.zero = which(beta_opt != 0)
n.zero
beta_opt
f
f = which(beta_opt != 0)
f
beta_opt
beta_opt = as.vector(beta)
beta_opt
beta_opt = as.data.frame(beta)
beta_opt
source("/Users/trinegraff/Desktop/Projekt/R/unrate/script/script.R")
data.frame(
lambda = c("min", "1se"),
lambda_val = c(lasso_cv$lambda.min, lasso_cv$lambda.1se),
error = with(lasso_cv, c(cvm[which(lambda == lasso_cv$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(lasso_fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se)), 2, parm)
)
parm = function(x) {
(sum(x != 0))
}
data.frame(
lambda = c("min", "1se"),
lambda_val = c(lasso_cv$lambda.min, lasso_cv$lambda.1se),
error = with(lasso_cv, c(cvm[which(lambda == lasso_cv$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(lasso_fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se)), 2, parm)
)
b_hat = coef(lasso_fit, s = lasso_cv$lambda.1se)
idx_hat = which(b_hat != 0)
b_hat[idx_hat, ]
data.frame(
lambda = c("min", "1se"),
lambda_val = c(ridge_cv$lambda.min, ridge_cv$lambda.1se),
error = with(ridge_cv, c(cvm[which(lambda == ridge_cv$lambda.min)], cvm[which(lambda == ridge_cv$lambda.1se)])),
p = apply(coef(ridge_fit, s = c(ridge_cv$lambda.min, ridge_cv$lambda.1se)), 2, parm)
)
cv1_min  = c(lambda = fit0.1$lambda.min, cvm = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.min], alpha = 0.1)
cv2_min = c(lambda = fit0.188888888888889$lambda.min,
cvm_min = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.min], alpha = 0.188888888888889)
cv3_min = c(lambda = fit0.277777777777778$lambda.min,
cvm_min = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.min], alpha = 0.277777777777778 )
cv4_min = c(lambda = fit0.366666666666667$lambda.min,
cvm_min = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.min], alpha = 0.366666666666667)
cv5_min = c(lambda = fit0.455555555555556$lambda.min,
cvm_min = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.min], alpha =  0.455555555555556)
cv6_min = c(lambda = fit0.544444444444445$lambda.min,
cvm_min = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.min], alpha = 0.544444444444445)
cv7_min = c(lambda = fit0.633333333333333$lambda.min,
cvm_min = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.min], alpha = 0.633333333333333)
cv8_min = c(lambda = fit0.722222222222222$lambda.min,
cvm_min = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.min], alpha =0.722222222222222)
cv9_min = c(lambda = fit0.811111111111111$lambda.min,
cvm_min = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.min], alpha = 0.811111111111111)
cv10_min = c(lambda = fit0.9$lambda.min, cvm_min = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.min], alpha = 0.9)
cv1_sd  = c(lambda.sd = fit0.1$lambda.1se, cvm_sd = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.1se], alpha = 0.1)
cv2_sd  = c(lambda.sd = fit0.188888888888889$lambda.1se,
cvm_sd = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.1se], alpha =0.188888888888889)
cv3_sd = c(lambda.sd = fit0.277777777777778$lambda.1se,
cvm_sd = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.1se], alpha = 0.277777777777778)
cv4_sd = c(lambda.sd = fit0.366666666666667$lambda.1se,
cvm_sd = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.1se], alpha = 0.366666666666667)
cv5_sd  = c(lambda.sd = fit0.455555555555556$lambda.1se,
cvm_sd = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.1se], alpha =0.455555555555556)
cv6_sd  = c(lambda.sd = fit0.544444444444445$lambda.1se,
cvm_sd = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.1se], alpha = 0.544444444444445)
cv7_sd  = c(lambda.sd = fit0.633333333333333$lambda.1se,
cvm_sd = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.1se], alpha = 0.633333333333333)
cv8_sd  = c(lambda.sd = fit0.722222222222222$lambda.1se,
cvm_sd = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.1se], alpha = 0.722222222222222)
cv9_sd  = c(lambda.sd = fit0.811111111111111$lambda.1se,
cvm_sd = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.1se], alpha = 0.811111111111111)
cv10_sd  = c(lambda.sd = fit0.9$lambda.1se, cvm_sd = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.1se], alpha = 0.9)
cv = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min,
cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
cv_min = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min)
cv_1sd = data.frame(cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
which.min(cv_1sd[2,] )
data.frame(
lambda = c("min", "1se"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm)
)
fit_el = glmnet(x, y, family = "gaussian", alpha = 0.9, intercept = FALSE )
data.frame(
lambda = c("min", "1se"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm)
)
data.frame(
lambda = c("min", "1se"),
lambda_val = c(gglasso_cv$lambda.min, gglasso_cv$lambda.1se),
error = with(gglasso_cv, c(cvm[which(lambda == gglasso_cv$lambda.min)], cvm[which(lambda == gglasso_cv$lambda.1se)])),
p = apply(coef(gglasso_fit , s = c(gglasso_cv$lambda.min, gglasso_cv$lambda.1se)), 2, parm)
)
data.frame(
lambda = c("min", "1se"),
lambda_val = c(lasso_cv$lambda.min, lasso_cv$lambda.1se),
error = with(lasso_cv, c(cvm[which(lambda == lasso_cv$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(lasso_fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se)), 2, parm)
)
b_hat = coef(lasso_fit, s = lasso_cv$lambda.1se)
idx_hat = which(b_hat != 0)
b_hat[idx_hat, ]
data.frame(
lambda = c("min", "1se"),
lambda_val = c(ridge_cv$lambda.min, ridge_cv$lambda.1se),
error = with(ridge_cv, c(cvm[which(lambda == ridge_cv$lambda.min)], cvm[which(lambda == ridge_cv$lambda.1se)])),
p = apply(coef(ridge_fit, s = c(ridge_cv$lambda.min, ridge_cv$lambda.1se)), 2, parm)
)
cv1_min  = c(lambda = fit0.1$lambda.min, cvm = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.min], alpha = 0.1)
cv2_min = c(lambda = fit0.188888888888889$lambda.min,
cvm_min = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.min], alpha = 0.188888888888889)
cv3_min = c(lambda = fit0.277777777777778$lambda.min,
cvm_min = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.min], alpha = 0.277777777777778 )
cv4_min = c(lambda = fit0.366666666666667$lambda.min,
cvm_min = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.min], alpha = 0.366666666666667)
cv5_min = c(lambda = fit0.455555555555556$lambda.min,
cvm_min = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.min], alpha =  0.455555555555556)
cv6_min = c(lambda = fit0.544444444444445$lambda.min,
cvm_min = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.min], alpha = 0.544444444444445)
cv7_min = c(lambda = fit0.633333333333333$lambda.min,
cvm_min = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.min], alpha = 0.633333333333333)
cv8_min = c(lambda = fit0.722222222222222$lambda.min,
cvm_min = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.min], alpha =0.722222222222222)
cv9_min = c(lambda = fit0.811111111111111$lambda.min,
cvm_min = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.min], alpha = 0.811111111111111)
cv10_min = c(lambda = fit0.9$lambda.min, cvm_min = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.min], alpha = 0.9)
cv1_sd  = c(lambda.sd = fit0.1$lambda.1se, cvm_sd = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.1se], alpha = 0.1)
cv2_sd  = c(lambda.sd = fit0.188888888888889$lambda.1se,
cvm_sd = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.1se], alpha =0.188888888888889)
cv3_sd = c(lambda.sd = fit0.277777777777778$lambda.1se,
cvm_sd = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.1se], alpha = 0.277777777777778)
cv4_sd = c(lambda.sd = fit0.366666666666667$lambda.1se,
cvm_sd = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.1se], alpha = 0.366666666666667)
cv5_sd  = c(lambda.sd = fit0.455555555555556$lambda.1se,
cvm_sd = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.1se], alpha =0.455555555555556)
cv6_sd  = c(lambda.sd = fit0.544444444444445$lambda.1se,
cvm_sd = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.1se], alpha = 0.544444444444445)
cv7_sd  = c(lambda.sd = fit0.633333333333333$lambda.1se,
cvm_sd = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.1se], alpha = 0.633333333333333)
cv8_sd  = c(lambda.sd = fit0.722222222222222$lambda.1se,
cvm_sd = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.1se], alpha = 0.722222222222222)
cv9_sd  = c(lambda.sd = fit0.811111111111111$lambda.1se,
cvm_sd = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.1se], alpha = 0.811111111111111)
cv10_sd  = c(lambda.sd = fit0.9$lambda.1se, cvm_sd = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.1se], alpha = 0.9)
cv = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min,
cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
cv_min = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min)
cv_1sd = data.frame(cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
which.min(cv_1sd[2,] )
fit_el = glmnet(x, y, family = "gaussian", alpha = 0.9, intercept = FALSE )
data.frame(
lambda = c("min", "1se"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm)
)
data.frame(
lambda = c("min", "1se"),
lambda_val = c(gglasso_cv$lambda.min, gglasso_cv$lambda.1se),
error = with(gglasso_cv, c(cvm[which(lambda == gglasso_cv$lambda.min)], cvm[which(lambda == gglasso_cv$lambda.1se)])),
p = apply(coef(gglasso_fit , s = c(gglasso_cv$lambda.min, gglasso_cv$lambda.1se)), 2, parm)
)
df_l = data.frame(lasso_cv$lambda, lasso_cv$cvm, lasso_cv$cvsd)
l = ggplot(df_l, aes(log(df_l$lasso_cv.lambda),df_l$lasso_cv.cvm )) +
geom_errorbar(aes(ymin = df_l$lasso_cv.cvm + df_l$lasso_cv.cvsd,
ymax = df_l$lasso_cv.cvm - df_l$lasso_cv.cvsd, width = .1)) +
geom_point(col = "red") +
labs(x = expression(log(lambda)), y = "MSE", color = "") +
geom_vline(aes(xintercept= log(lasso_cv$lambda.min), col = "blue"), linetype="dotted") +
geom_vline(aes(xintercept= log(lasso_cv$lambda.1se), col = "brown"), linetype="dotted") +
ggtitle("Lasso") + scale_color_manual(labels = c(expression(lambda[min]), expression(lambda[1][sd])), values = c("blue", "brown"))
df_r = data.frame(ridge_cv$lambda, ridge_cv$cvm, ridge_cv$cvsd)
r = ggplot(df_r, aes(log(df_r$ridge_cv.lambda),df_r$ridge_cv.cvm )) +
geom_errorbar(aes(ymin = df_r$ridge_cv.cvm + df_r$ridge_cv.cvsd, ymax = df_r$ridge_cv.cvm - df_r$ridge_cv.cvsd, width = .1)) +
geom_point(col = "red") +
labs(x = expression(log(lambda)), y = "MSE", color = "") +
geom_vline(aes(xintercept= log(ridge_cv$lambda.min), col = "blue"), linetype="dotted") +
geom_vline(aes(xintercept= log(ridge_cv$lambda.1se), col = "brown"), linetype="dotted") +
ggtitle("Ridge") + scale_color_manual(labels = c(expression(lambda[min]), expression(lambda[1][sd])), values = c("blue", "brown"))
df_el = data.frame(fit0.9$lambda, fit0.9$cvm, fit0.9$cvsd)
el = ggplot(df_el, aes(log(df_el$fit0.9.lambda),df_el$fit0.9.cvm )) +
geom_errorbar(aes(ymin = df_el$fit0.9.cvm + df_el$fit0.9.cvsd, ymax = df_el$fit0.9.cvm - df_el$fit0.9.cvsd, width = .1)) +
geom_point(col = "red") +
labs(x = expression(log(lambda)), y = "MSE", color = "") +
geom_vline(aes(xintercept= log(fit0.9$lambda.min), col = "blue"), linetype="dotted") +
geom_vline(aes(xintercept= log(fit0.9$lambda.1se), col = "brown"), linetype="dotted") +
ggtitle("Elastic Net") + scale_color_manual(labels = c(expression(lambda[min]), expression(lambda[1][sd])), values = c("blue", "brown"))
df_grp = data.frame(gglasso_cv$lambda, gglasso_cv$cvm, gglasso_cv$cvsd)
grp = ggplot(df_grp, aes(log(df_grp$gglasso_cv.lambda),df_grp$gglasso_cv.cvm )) +
geom_errorbar(aes(ymin = df_grp$gglasso_cv.cvm + df_grp$gglasso_cv.cvsd,
ymax = df_grp$gglasso_cv.cvm - df_grp$gglasso_cv.cvsd, width = .1)) +
geom_point(col = "red") +
labs(x = expression(log(lambda)), y = "MSE", color = "") +
geom_vline(aes(xintercept= log(gglasso_cv$lambda.min), col = "blue"), linetype="dotted") +
geom_vline(aes(xintercept= log(gglasso_cv$lambda.1se), col = "brown"), linetype="dotted") +
ggtitle("Group Lasso") + scale_color_manual(labels = c(expression(lambda[min]), expression(lambda[1][sd])), values = c("blue", "brown"))
cv_plot = grid.arrange(l, r, el, grp)
cv_plot = grid.arrange(l, r, el, grp)
data.frame(
lambda = c("min", "1se"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm)
)
which.min(cv_1sd[2,] )
cv_min
which.min(cv_min[2,] )
which.min(cv_1sd[2,] )
which.min(cv_1sd[2,] )
cv_1sd
data.frame(
lambda = c("min"),
lambda_val = c(fit0.9$lambda.min),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)])),
p = apply(coef(fit_el, s = (fit0.9$lambda.min), parm))
)
data.frame(
lambda = c("min"),
lambda_val = c(fit0.9$lambda.min),
error = with(fit0.9, cvm[which(lambda == fit0.9$lambda.min)]),
p = apply(coef(fit_el, s = fit0.9$lambda.min, parm))
)
apply(coef(fit_el, s = fit0.9$lambda.min, parm)
data.frame(
lambda = c("min"),
lambda_val = c(fit0.9$lambda.min),
error = with(fit0.9, cvm[which(lambda == fit0.9$lambda.min)]),
p = apply(coef(fit_el, s = fit0.9$lambda.min, parm))
)
data.frame(
lambda = c("min"),
lambda_val = c(fit0.9$lambda.min),
error = with(fit0.9, cvm[which(lambda == fit0.9$lambda.min)]),
p = parm(coef(fit_el, s = fit0.9$lambda.min))
)
with(fit0.9, cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])
data.frame(
lambda = c("min", "1sd"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = parm(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)))
)
coef(fit_el, s = fit0.9$lambda.1se)
parm(coef(fit_el, s = fit0.9$lambda.1se))
data.frame(
lambda = c("min", "1sd"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se), 2, parm))
)
data.frame(
lambda = c("min", "1sd"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm))
data.frame(
lambda = c("min", "1sd"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9v$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm))
data.frame(
lambda = c("min", "1sd"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm))
parm(coef(fit_el, s = fit0.9$lambda.1se))
b_hat = coef(fit_el, s = lasso_cv$lambda.1se)
b_hat = coef(fit_el, s = fit0.9$lambda.1se)
idx_hat = which(b_hat != 0)
b_hat[idx_hat, ]
b_hat_el = coef(fit_el, s = fit0.9$lambda.1se)
idx_hat_el = which(b_hat_el != 0)
b_hat[idx_hat_el, ]
data.frame(
lambda = c("min", "1se"),
lambda_val = c(lasso_cv$lambda.min, lasso_cv$lambda.1se),
error = with(lasso_cv, c(cvm[which(lambda == lasso_cv$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(lasso_fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se)), 2, parm)
)
b_hat = coef(lasso_fit, s = lasso_cv$lambda.1se)
idx_hat = which(b_hat != 0)
b_hat[idx_hat, ]
b_hat_el = coef(fit_el, s = fit0.9$lambda.1se)
idx_hat_el = which(b_hat_el != 0)
b_hat[idx_hat_el, ]
fit0.9$lambda.1se
lasso_cv$lambda.1se
b_hat = coef(lasso_fit, s = lasso_cv$lambda.1se)
idx_hat = which(b_hat != 0)
b_hat[idx_hat, ]
b_hat_el = coef(fit_el, s = fit0.9$lambda.1se)
idx_hat_el = which(b_hat_el != 0)
b_hat[idx_hat_el, ]

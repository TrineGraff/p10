source("../scripts/setup_data.R")
setwd("~/Documents/AAU/10. semester/r codes/scripts")
source("../scripts/setup_data.R")
library(selectiveInference)
# Forfatter: Ryan Tibshirani, Rob Tibshirani, Jonathan Taylor,
# Joshua Loftus, Stephen Reid
# main fcts: lar, larInf, fixedLassoInf
set.seed(1)
# kun for lar ikke lars.lasso!!!
larfit <- lar(X.train, y.train, intercept = FALSE, normalize = FALSE, verbose = TRUE)
source("data_unrate.R")
setwd("~/Desktop/p10/R/Rkoder/unrate")
source("package.R")
source("data_unrate.R")
install.packages("matrixcalc")
source("package.R")
install.packages("e1071")
source("package.R")
setwd("~/Desktop/p10/R/Rkoder/data")
source("data_unrate.R")
setwd("~/Desktop/p10/R/Rkoder/unrate/autoregressive_model")
source("data_unrate.R")
setwd("~/Desktop/p10/R/Rkoder/unrate")
source("data_unrate.R")
setwd("~/Desktop/p10/R/Rkoder/unrate")
source("data_unrate.R")
setwd("~/Desktop/p10/R/Rkoder/unrate")
source("data_unrate.R")
setwd("~/Desktop/p10/R/Rkoder/unrate")
setwd("~/Desktop/Projekt/R/unrate")
data_raw = read.csv("../data/transformed_data.csv") %>% as.data.frame()
source("data_unrate.R")
opt.orden = function(x, p.max){
BIC.vektor = rep(NA, p.max)
for (p in 1:p.max){
y = x[(p + 1):length(x)]
n.obs = length(y)
x.lag = matrix(nrow = n.obs, ncol = p)
for (j in 1:p){
for (i in 1:n.obs){
x.lag[i,j] = x[p+i-j]
}
}
beta.hat = solve(crossprod(x.lag), crossprod(x.lag, y))
sigma2.hat = mean((y - x.lag %*% beta.hat)^2)
BIC = log(sigma2.hat) + (p * log(n.obs) / n.obs)
BIC.vektor[p] = BIC
}
print(which.min(BIC.vektor))
}
opt.orden(ya_train, 12)
beta = function(x, p, summary = F, fit = F) {
y = x[(p + 1):length(x)]
n.obs = length(y)
x.lag = matrix(nrow = n.obs, ncol = p)
for (j in 1 : p){
for (i in 1 : n.obs){
x.lag[i, j] = x[p + i - j]
}
}
beta.hat = solve(crossprod(x.lag), crossprod(x.lag, y))
if(fit){
fit = x.lag %*% beta.hat
resid = y - fit
return(list("beta.hat" = beta.hat, "fit" = fit, "residuals" = resid))
}
if(summary){
sigma2.hat = mean((y - x.lag %*% beta.hat)^2)
std.error = sqrt(diag(sigma2.hat * solve(crossprod(x.lag))))
t.value = beta.hat / std.error
p.value = pnorm(- abs(beta.hat) / std.error) * 2
BIC = log(sigma2.hat) + (p * log(n.obs) / n.obs)
SS.res = sum((y - x.lag %*% beta.hat)^2)
SS.tot = sum((y - mean(y))^2)
R.sqrd = 1 - (SS.res / SS.tot)
adj.R.sqrt = 1 - (1 - R.sqrd) * ((n.obs - 1) / (n.obs - p - 1))
ml.sigma = sqrt(sigma2.hat) * sqrt((n.obs - p) / n.obs)
fit = x.lag %*% beta.hat
loglike = sum(log(dnorm(y, mean = fit, sd = ml.sigma)))
return(cbind.data.frame(round(beta.hat, digits = 4), std.error, t.value, p.value,
sigma2.hat, BIC, R.sqrd, adj.R.sqrt, loglike))
}
}
beta(y_train, 4, summary = T, fit = F)
# Forecast - AR -----------------------------------------------------------
ForecastAR= function(data, p, idx = idx) {
fc = c(NA)
for(k in 0:length(data[-c(1:idx)]) - 1) {
y = data[(p + 1):(length(data[1:idx]) + k)]
n = length(y)
x.lag = matrix(nrow = n, ncol = p)
for (j in 1:p){
for (i in 1:n){
x.lag[i, j] = data[p + i - j]
}
}
beta.hat = solve(crossprod(x.lag), crossprod(x.lag, y))
fc[k+1] = data[(length(data[1:idx]) + k):(length(data[1:idx]) + k - p + 1)] %*% beta.hat
}
print(list("fc" = fc))
}
ForecastAR
# Forecast - AR -----------------------------------------------------------
ForecastAR= function(data, p, idx = idx) {
fc = c(NA)
for(k in 0:length(data[-c(1:idx)]) - 1) {
y = data[(p + 1):(length(data[1:idx]) + k)]
n = length(y)
x.lag = matrix(nrow = n, ncol = p)
for (j in 1:p){
for (i in 1:n){
x.lag[i, j] = data[p + i - j]
}
}
beta.hat = solve(crossprod(x.lag), crossprod(x.lag, y))
fc[k+1] = data[(length(data[1:idx]) + k):(length(data[1:idx]) + k - p + 1)] %*% beta.hat
}
print(list("fc" = fc))
}
ForecastAR
# Forecast - AR -----------------------------------------------------------
ForecastAR= function(data, p, idx = idx) {
fc = c(NA)
for(k in 0:length(data[-c(1:idx)]) - 1) {
y = data[(p + 1):(length(data[1:idx]) + k)]
n = length(y)
x.lag = matrix(nrow = n, ncol = p)
for (j in 1:p){
for (i in 1:n){
x.lag[i, j] = data[p + i - j]
}
}
beta.hat = solve(crossprod(x.lag), crossprod(x.lag, y))
fc[k+1] = data[(length(data[1:idx]) + k):(length(data[1:idx]) + k - p + 1)] %*% beta.hat
}
print(list("fc" = fc))
}
source("data_unrate.R")
source("package.R")
source("shrinkage_metoder/res_plot.R")
setwd("~/Desktop/p10/R/Rkoder/unrate/faktor_model")
setwd("~/Desktop/p10/R/Rkoder/unrate")
source("shrinkage_metoder/res_plot.R")
getFactors <- function(X, k) {
p = ncol(X)
XTX = crossprod(X)
X.eig = eigen(XTX, symmetric = TRUE)
eig.vec = X.eig$vectors
loadings = eig.vec[, 1:k] * sqrt(p)
factors = (X %*% loadings) / p
list.out <- list(
"factors" = factors ,
"loading" = loadings
)
return(list.out)
}
estFactors <- function(X.df, ic = 1, trace = FALSE) {
X = as.matrix(X.df)
n.obs = nrow(X)
p = ncol(X)
k.max = 20
ics = rep(NA, k.max)
for (k in 1:k.max) {
est.k <- getFactors(X, k)
F.k <- est.k$factors
L.k <- est.k$loading
if(ic == 1) {
penalty <- k * (p + n.obs) / (p * n.obs) * log((p * n.obs) / p + n.obs)
} else if (ic == 2) {
penalty <- k * (p + n.obs) / (p * n.obs) * log(min(p, n.obs))
} else if (ic == 3) {
penalty <- k * log(min(p, n.obs)) / min(p, n.obs)
} else {
stop("Invalid information criterion argument")
}
V.k = matrix.trace(crossprod(X - tcrossprod(F.k, L.k))) / (n.obs * p)
ics[k] = log(V.k) + penalty
if (trace) cat("k =", k, "\tV =", V.k, "\tIC =", ics[k], "\n")
}
k.opt = which.min(ics)
est.opt = getFactors(X, k.opt)
factors.opt = est.opt$factors
colnames(factors.opt) = paste("F", 1:k.opt, sep = "")
df.out = data.frame(factors.opt) %>% tbl_df
return(df.out)
}
# Fittede residualer ------------------------------------------------------
m = 4 #valgt fra en AR
#Laver omega_t
df.y.lags = foreach(i = 1:m, .combine = cbind) %do%{
lag(yf_train, i)
}
colnames(df.y.lags) = c("lag1", "lag2", "lag3", "lag4")
#Faktorerne for de forskelle IC
factors.IC.1 = estFactors(xf_train, ic = 1, trace = T) #6 faktorer
factors.IC.2 = estFactors(xf_train, ic = 2, trace = T) #11 faktorer
factors.IC.3 = estFactors(xf_train, ic = 3, trace = T) #20 faktorer
fit = function(F.t, w.t, y_train) {
m = dim(w.t)[2] # antal lags
n.obs = dim(w.t)[1] #antal observationer t_0
k = dim(F.t)[2] #antal faktorer
Z = data.frame(F.t, w.t) %>% tbl_df
Z = Z[(m + 1):n.obs,] %>% as.matrix(.) #ser bort fra de første m rækker
y.res = y_train[(m + 1):n.obs] #ser bort fra de første m observationer
beta.hat = solve(crossprod(Z), crossprod(Z, y.res))
fit = Z %*% beta.hat
resid = y.res - fit
scale_resid = scale(resid)
return(list("beta.hat" = beta.hat, "fit" = fit, "scale_residuals" = scale_resid))
}
source("package.R")
source("data_unrate.R")
getFactors <- function(X, r) {
p = ncol(X)
XTX = crossprod(X)
X.eig = eigen(XTX, symmetric = TRUE)
eig.vec = X.eig$vectors
loadings = eig.vec[, 1:r] * sqrt(p)
factors = (X %*% loadings) / p
list.out <- list(
"factors" = factors ,
"loading" = loadings
)
return(list.out)
}
ForecastFaktor <- function(y, X, idx = idx, m = 4, r.hat) {
df.y.lags = foreach(i = 1:m, .combine = cbind) %do%{
lag(y, i)
}
n.obs = length(y_test)
fc = foreach(i = 1:n.obs, .combine = rbind) %do%{
X = xf[1:(idx + i),]
w.t = df.y.lags[1:(idx + i), ]
F.t = getFactors(X, r.hat)$factors
Z = data.frame(F.t, w.t)
Z.in = Z[(m + 1):(idx + i - 1), ] %>% as.matrix(.)
Y.res = y[(m + 1):(idx + i - 1)]
Z.out = Z[(idx + i), ] %>% as.matrix(.)
ZTZ = crossprod(Z.in)
ZY = crossprod(Z.in, Y.res)
beta = solve(ZTZ, ZY)
Y.fc <- Z.out %*% beta
return(Y.fc)
}
print(fc)
}
source("data_unrate.R")
source("package.R")
source("parm.R")
source("shrinkage_metoder/res_plot.R")
source("shrinkage_metoder/coordinate/bic.R")
fit_lasso = glmnet(x_train, y_train, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
fit_bic_lasso = lassoBIC(y_train, x_train, fit_lasso)
source("shrinkage_metoder/coordinate/lasso/bic/insample.R")
source("shrinkage_metoder/coordinate/forecasts.R")
source("mae_mse.R")
lasso_fc = glmnet_forecast(y, x, alpha = 1, idx = (idx), fit_bic_lasso$lambda)
lasso_fc = Forecast(y, x, alpha = 1, idx = (idx), fit_bic_lasso$lambda)
source("../scripts/setup_data.R")
setwd("~/Documents/AAU/10. semester/r codes")
source("../scripts/setup_data.R")
setwd("~/Documents/AAU/10. semester/r codes")
source("../scripts/setup_data.R")
source("/scripts/setup_data.R")
source("/setup_data.R")
setwd("~/Documents/AAU/10. semester/r codes/scripts")
source("/setup_data.R")
source("setup_data.R")
library(tidyverse)
library(gglasso)
library(MCS)
library(MCS)
source("../scripts/setup_data.R")
ar4 = read.csv(file = "results/fc_ar4.csv")
setwd("~/Desktop/p10/R/unrate")
ar4 = read.csv(file = "results/fc_ar4.csv")
faktor_ic1 = read.csv(file = "results/fc_faktor_ic1.csv")
faktor_ic2 = read.csv(file = "results/fc_faktor_ic2.csv")
faktor_ic3 = read.csv(file = "results/fc_faktor_ic3.csv")
lasso_kryds = read.csv(file = "results/fc_lasso_kryds.csv")
lasso_bic = read.csv(file = "results/fc_lasso_bic.csv")
ridge_kryds = read.csv(file = "results/fc_ridge_kryds.csv")
ridge_bic = read.csv(file = "results/fc_ridge_bic.csv")
gglasso_bic = read.csv(file = "results/fc_gglasso_bic.csv")
gglasso_kryds = read.csv(file = "results/fc_gglasso_kryds.csv")
adap_ols_kryds = read.csv(file = "results/fc_lasso_ols_kryds.csv")
adap_ols_bic = read.csv(file = "results/fc_lasso_ols_bic.csv")
adap_lasso_kryds = read.csv(file = "results/fc_adap_lasso_kryds.csv")
adap_lasso_bic = read.csv(file = "results/fc_adap_lasso_bic.csv")
lars_kryds = read.csv(file = "results/fc_lars_kryds.csv")
lars_bic = read.csv(file = "results/fc_lars_bic.csv")
lars_lasso_kryds = read.csv(file = "results/fc_lars_lasso_kryds.csv")
lars_lasso_bic = read.csv(file = "results/fc_lars_lasso_bic.csv")
diffs <- data.frame(ar4[,2] - y.test, faktor_ic1[,2] - y.test, faktor_ic2[,2] - y.test,
faktor_ic3[,2] - y.test, lasso_kryds[,2] - y.test, lasso_bic[,2] - y.test,
ridge_kryds[,2] - y.test, ridge_bic[,2] - y.test,
gglasso_kryds[,2] - y.test, gglasso_bic[,2] - y.test,
adap_ols_kryds[,2] - y.test, adap_ols_bic[,2] - y.test,
adap_lasso_kryds[,2] - y.test, adap_lasso_bic[,2] - y.test,
lars_kryds[,2] - y.test, lars_bic[,2] - y.test,
lars_lasso_kryds[,2] - y.test, lars_lasso_bic[,2] - y.test)
LARS_TG_kryds = read.csv(file = "results/fc_lars_TG_kryds.csv")
LARS_TG_bic = read.csv(file = "results/fc_lars_TG_bic.csv")
lasso_TG_kryds = read.csv(file = "results/fc_lasso_TG_kryds.csv")
lasso_TG_bic = read.csv(file = "results/fc_lasso_TG_bic.csv")
lars_kryds = read.csv(file = "results/fc_lars_kryds.csv")
lars_bic = read.csv(file = "results/fc_lars_bic.csv")
lars_lasso_kryds = read.csv(file = "results/fc_lars_lasso_kryds.csv")
lars_lasso_bic = read.csv(file = "results/fc_lars_lasso_bic.csv")
LARS_TG_kryds = read.csv(file = "results/fc_lars_TG_kryds.csv")
LARS_TG_bic = read.csv(file = "results/fc_lars_TG_bic.csv")

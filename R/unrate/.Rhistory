y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]] %*% coef$1
}
print(coef)
}
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]] %*% coef$1
}
print(coef)
}
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]] %*% coef$´1´
}
print(coef)
}
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]]
}
print(list(coef))
}
forecast(y, x, idx, lambda.min$lambda_min)
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]]
}
print(list(coef[1]))
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]]
print(coef)[1]
}
print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]] %*% print(coef)[1]
}
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]] %*% coef[1]
}
print(fc)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
fit = glmnet(x, y, alpha = 0, intercept = FALSE)
fit
coef = coeg(fit, s= 0.16470)
coef = coef(fit, s= 0.16470)
coef
coef[1]
coef$´11
coef$´1´
coef[[1]]
data.matrix(coef)
coef = data.matrix(coef)
coef
coef[, 1]
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]] %*% coef[,1]
}
print(fc)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
coef = data.frame(coef)
coef
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.frame(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]] %*% coef$X1
}
print(fc)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
coef$X1
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.frame(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef$X1
}
print(fc)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef$X1
}
print(fc)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef$X1
}
print(fc)
pri(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef$X1
}
#print(fc)
print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
fc[k+1] = x[dim(x_kov)[1] +1 ] %*% coef
#%*% coef$X1
}
#print(fc)
print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
fit = glmnet(x, y, alpha = 0, intercept = FALSE)
coef = coef(fit, s= 0.16470)
coef
coef = data.matrix(coef(fit, s= 0.16470))
coef
coef = data.matrix(coef(fit, s= 0.16470)) %>% .(-c(1))
coef = data.matrix(coef(fit, s= 0.16470)) %>% .[-c(1)]
coef
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] = x[dim(x_kov)[1] +1 ] %*% coef
#%*% coef$X1
}
#print(fc)
print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
warnings()
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] = x[dim(x_kov)[1] ] %*% coef
#%*% coef$X1
}
#print(fc)
print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
warnings()
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] = x[dim(x_kov)[1]] %*% coef
print(x[dim(x_kov)[1]])
}
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
#fc[k+1] = x[dim(x_kov)[1]] %*% coef
print(x[dim(x_kov)[1]])
}
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
#fc[k+1] = x[dim(x_kov)[1]] %*% coef
print(x[dim(x_kov)[1]])
}
print(x[dim(x_kov)[1]])
print(length(x[dim(x_kov)[1]]))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(x[dim(x_kov)[1]])
print(length(x[dim(x_kov)[1]]))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(x[dim(x_kov)[1]])
print(length(x[dim(x_kov)[1]]))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
x[dim(x)]
dim(x)[1]
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(x[dim(x_kov)[1]])
print(length(x[dim(x_kov)[1]]))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] = x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(fc)
print(length(fc))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda)) %>% .[-c(1)] #skæringen
fc[k+1] =  coef
#x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(fc)
print(length(fc))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
warning()
warnings()
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
coef = coef(-c(1))#skæringen
fc[k+1] =  coef
#x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(fc)
print(length(fc))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
coef
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
coef = coef[-c(1)]#skæringen
fc[k+1] =  coef
#x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(fc)
print(length(fc))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
#coef = coef[-c(1)]#skæringen
fc[k+1] =  coef
#x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(fc)
print(length(fc))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
#coef = coef[-c(1)]#skæringen
fc[k+1] =  x[dim(x_kov)[1]] %*%coef
#x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(fc)
print(length(fc))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
coef = coef[-c(1)]#skæringen
fc[k+1] =  x[dim(x_kov)[1]] %*%coef
#x[dim(x_kov)[1]]
#%*% coef
#print(x[dim(x_kov)[1]])
}
print(fc)
print(length(fc))
#print(fc)
#print(coef)
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
coef = coef[-c(1)]#skæringen
fc[k+1] =  x[dim(x_kov)[1]] %*%coef
}
print(list(fc))
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
forecast = function(y, x, idx = idx, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)]) - 1) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ]
fit = glmnet(x_kov, y_res, alpha = 0, intercept = FALSE)
coef = data.matrix(coef(fit, s = lambda))
coef = coef[-c(1)]#skæringen
fc[k+1] =  x[dim(x_kov)[1]] %*%coef
}
print(list("fc" = fc))
}
fit = forecast(y, x, idx, lambda.min$lambda_min)
plot(fit$fc, type = "l", col = "red")
plot(fit$fc, type = "l", col = "red")
par(new = TRUE)
plot(unrate[-c(1:idx)], type ="l", ylim = c(-3, 3), xlim = c(0, 140))
plot(fit$fc, type = "l", col = "red", ylim = c(-3, 3), xlim = c(0, 140))
par(new = TRUE)
plot(y[-c(1:idx)], type ="l", ylim = c(-3, 3), xlim = c(0, 140))
plot(y[-c(1:idx)], type ="l", ylim = c(-3, 3), xlim = c(0, 140))
plot(fit$fc, type = "l", col = "red", ylim = c(-3, 3), xlim = c(0, 140))
par(new = TRUE)
plot(y[-c(1:idx)], type ="l", ylim = c(-3, 3), xlim = c(0, 140))
data[, "UNRATE"]
source("/Users/trinegraff/Desktop/Projekt/R/data/setup_data.R")
y = data[, "UNRATE"]
y
plot(fit$fc, type ="l", ylim = c(-3, 3), xlim = c(0, 140), col = "red")
par(new = TRUE)
plot(unrate[-c(1:idx)], type ="l", ylim = c(-3, 3), xlim = c(0, 140))
plot(y[-c(1:idx)], type ="l", ylim = c(-3, 3), xlim = c(0, 140))

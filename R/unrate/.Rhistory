# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
?glmnet
forecast = function(y, x, idx = idx, lambda, alpha) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(("fc" = fc))
}
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
forecast = function(y, x, idx = idx, lambda, alpha) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print( fc)
}
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
lambda_ridge
library(tidyverse)
library(glmnet)
source("../data/setup_data.R")
drops = c("UNRATE")
x = scale(data[ , !(colnames(data) %in% drops)])
y = scale(data[, "UNRATE"], scale = FALSE)
forecast = function(y, x, idx = idx, lambda, alpha) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print( fc)
}
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
forecast = function(y, x, idx = idx, lambda, alpha, penalty.factor = NULL) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE, penalty.factor )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
# lasso -------------------------------------------------------------------
lambda_lasso = read.csv("results/lasso_lambda.csv") %>% .[1, 2]
fc_ridge = forecast(y, x, idx = idx, lambda = lambda_lasso, alpha = 1)
fc_lasso = forecast(y, x, idx = idx, lambda = lambda_lasso, alpha = 1)
forecast_glmnet = function(y, x, idx = idx, lambda, alpha, penalty.factor = NULL) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE, penalty.factor )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
source("script/script_coordinate.R")
cv1_min  = c(lambda = fit0.1$lambda.min, cvm = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.min], alpha = 0.1)
cv2_min = c(lambda = fit0.188888888888889$lambda.min,
cvm_min = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.min], alpha = 0.188888888888889)
cv3_min = c(lambda = fit0.277777777777778$lambda.min,
cvm_min = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.min], alpha = 0.277777777777778 )
cv4_min = c(lambda = fit0.366666666666667$lambda.min,
cvm_min = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.min], alpha = 0.366666666666667)
cv5_min = c(lambda = fit0.455555555555556$lambda.min,
cvm_min = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.min], alpha =  0.455555555555556)
cv6_min = c(lambda = fit0.544444444444445$lambda.min,
cvm_min = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.min], alpha = 0.544444444444445)
cv7_min = c(lambda = fit0.633333333333333$lambda.min,
cvm_min = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.min], alpha = 0.633333333333333)
cv8_min = c(lambda = fit0.722222222222222$lambda.min,
cvm_min = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.min], alpha =0.722222222222222)
cv9_min = c(lambda = fit0.811111111111111$lambda.min,
cvm_min = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.min], alpha = 0.811111111111111)
cv10_min = c(lambda = fit0.9$lambda.min, cvm_min = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.min], alpha = 0.9)
cv1_sd  = c(lambda.sd = fit0.1$lambda.1se, cvm_sd = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.1se], alpha = 0.1)
cv2_sd  = c(lambda.sd = fit0.188888888888889$lambda.1se,
cvm_sd = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.1se], alpha =0.188888888888889)
cv3_sd = c(lambda.sd = fit0.277777777777778$lambda.1se,
cvm_sd = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.1se], alpha = 0.277777777777778)
cv4_sd = c(lambda.sd = fit0.366666666666667$lambda.1se,
cvm_sd = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.1se], alpha = 0.366666666666667)
cv5_sd  = c(lambda.sd = fit0.455555555555556$lambda.1se,
cvm_sd = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.1se], alpha =0.455555555555556)
cv6_sd  = c(lambda.sd = fit0.544444444444445$lambda.1se,
cvm_sd = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.1se], alpha = 0.544444444444445)
cv7_sd  = c(lambda.sd = fit0.633333333333333$lambda.1se,
cvm_sd = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.1se], alpha = 0.633333333333333)
cv8_sd  = c(lambda.sd = fit0.722222222222222$lambda.1se,
cvm_sd = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.1se], alpha = 0.722222222222222)
cv9_sd  = c(lambda.sd = fit0.811111111111111$lambda.1se,
cvm_sd = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.1se], alpha = 0.811111111111111)
cv10_sd  = c(lambda.sd = fit0.9$lambda.1se, cvm_sd = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.1se], alpha = 0.9)
cv = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min,
cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
cv_min = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min)
cv_1sd = data.frame(cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
which.min(cv_1sd[2,] )
fit_el = glmnet(x, y, family = "gaussian", alpha = 0.9, intercept = FALSE )
data.frame(
lambda = c("min", "1sd"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm)
)
parm = function(x) {
(sum(x != 0))
}
cv1_min  = c(lambda = fit0.1$lambda.min, cvm = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.min], alpha = 0.1)
cv2_min = c(lambda = fit0.188888888888889$lambda.min,
cvm_min = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.min], alpha = 0.188888888888889)
cv3_min = c(lambda = fit0.277777777777778$lambda.min,
cvm_min = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.min], alpha = 0.277777777777778 )
cv4_min = c(lambda = fit0.366666666666667$lambda.min,
cvm_min = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.min], alpha = 0.366666666666667)
cv5_min = c(lambda = fit0.455555555555556$lambda.min,
cvm_min = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.min], alpha =  0.455555555555556)
cv6_min = c(lambda = fit0.544444444444445$lambda.min,
cvm_min = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.min], alpha = 0.544444444444445)
cv7_min = c(lambda = fit0.633333333333333$lambda.min,
cvm_min = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.min], alpha = 0.633333333333333)
cv8_min = c(lambda = fit0.722222222222222$lambda.min,
cvm_min = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.min], alpha =0.722222222222222)
cv9_min = c(lambda = fit0.811111111111111$lambda.min,
cvm_min = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.min], alpha = 0.811111111111111)
cv10_min = c(lambda = fit0.9$lambda.min, cvm_min = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.min], alpha = 0.9)
cv1_sd  = c(lambda.sd = fit0.1$lambda.1se, cvm_sd = fit0.1$cvm[fit0.1$lambda == fit0.1$lambda.1se], alpha = 0.1)
cv2_sd  = c(lambda.sd = fit0.188888888888889$lambda.1se,
cvm_sd = fit0.188888888888889$cvm[fit0.188888888888889$lambda == fit0.188888888888889$lambda.1se], alpha =0.188888888888889)
cv3_sd = c(lambda.sd = fit0.277777777777778$lambda.1se,
cvm_sd = fit0.277777777777778$cvm[fit0.277777777777778$lambda == fit0.277777777777778$lambda.1se], alpha = 0.277777777777778)
cv4_sd = c(lambda.sd = fit0.366666666666667$lambda.1se,
cvm_sd = fit0.366666666666667$cvm[fit0.366666666666667$lambda == fit0.366666666666667$lambda.1se], alpha = 0.366666666666667)
cv5_sd  = c(lambda.sd = fit0.455555555555556$lambda.1se,
cvm_sd = fit0.455555555555556$cvm[fit0.455555555555556$lambda == fit0.455555555555556$lambda.1se], alpha =0.455555555555556)
cv6_sd  = c(lambda.sd = fit0.544444444444445$lambda.1se,
cvm_sd = fit0.544444444444445$cvm[fit0.544444444444445$lambda == fit0.544444444444445$lambda.1se], alpha = 0.544444444444445)
cv7_sd  = c(lambda.sd = fit0.633333333333333$lambda.1se,
cvm_sd = fit0.633333333333333$cvm[fit0.633333333333333$lambda == fit0.633333333333333$lambda.1se], alpha = 0.633333333333333)
cv8_sd  = c(lambda.sd = fit0.722222222222222$lambda.1se,
cvm_sd = fit0.722222222222222$cvm[fit0.722222222222222$lambda == fit0.722222222222222$lambda.1se], alpha = 0.722222222222222)
cv9_sd  = c(lambda.sd = fit0.811111111111111$lambda.1se,
cvm_sd = fit0.811111111111111$cvm[fit0.811111111111111$lambda == fit0.811111111111111$lambda.1se], alpha = 0.811111111111111)
cv10_sd  = c(lambda.sd = fit0.9$lambda.1se, cvm_sd = fit0.9$cvm[fit0.9$lambda == fit0.9$lambda.1se], alpha = 0.9)
cv = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min,
cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
cv_min = data.frame(cv1_min, cv2_min, cv3_min, cv4_min, cv5_min, cv6_min, cv7_min, cv8_min, cv9_min, cv10_min)
cv_1sd = data.frame(cv1_sd, cv2_sd, cv3_sd, cv4_sd, cv5_sd, cv6_sd, cv7_sd, cv8_sd, cv9_sd, cv10_sd)
which.min(cv_1sd[2,] )
fit_el = glmnet(x, y, family = "gaussian", alpha = 0.9, intercept = FALSE )
data.frame(
lambda = c("min", "1sd"),
lambda_val = c(fit0.9$lambda.min, fit0.9$lambda.1se),
error = with(fit0.9, c(cvm[which(lambda == fit0.9$lambda.min)], cvm[which(lambda == fit0.9$lambda.1se)])),
p = apply(coef(fit_el, s = c(fit0.9$lambda.min, fit0.9$lambda.1se)), 2, parm)
)
c <- tidy(fit0.9$lambda.1se)
write.csv(c, file = "results/lasso_lambda.csv")
write.csv(c, file = "results/el_lambda.csv")
data.frame(
lambda = c("min", "1se"),
lambda_val = c(lasso_cv$lambda.min, lasso_cv$lambda.1se),
error = with(lasso_cv, c(cvm[which(lambda == lasso_cv$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(lasso_fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se)), 2, parm)
)
b_hat = coef(lasso_fit, s = lasso_cv$lambda.1se)
idx_hat = which(b_hat != 0)
b_hat[idx_hat, ]
c <- tidy(lasso_cv$lambda.1se)
write.csv(c, file = "results/lasso_lambda.csv")
# elastik net -------------------------------------------------------------
lambda_el = read.csv("results/el_lambda.csv") %>% .[1, 2]
library(tidyverse)
library(glmnet)
source("../data/setup_data.R")
drops = c("UNRATE")
x = scale(data[ , !(colnames(data) %in% drops)])
y = scale(data[, "UNRATE"], scale = FALSE)
forecast_glmnet = function(y, x, idx = idx, lambda, alpha, penalty.factor = NULL) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE, penalty.factor )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
# elastik net -------------------------------------------------------------
lambda_el = read.csv("results/el_lambda.csv") %>% .[1, 2]
lambda_el
forecast_glmnet = function(y, x, idx = idx, lambda, alpha, penalty.factor = NULL) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE, penalty.factor )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
lambda_el = read.csv("results/el_lambda.csv") %>% .[1, 2]
fc_lasso = forecast_glmnet(y, x, idx = idx, lambda = lambda_el, alpha = 0.9)
library(tidyverse)
library(glmnet)
source("../data/setup_data.R")
drops = c("UNRATE")
x = scale(data[ , !(colnames(data) %in% drops)])
y = scale(data[, "UNRATE"], scale = FALSE)
forecast_glmnet = function(y, x, idx = idx, lambda, alpha, penalty.factor = NULL) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = glmnet(x_kov, y_res, alpha = alpha, intercept = FALSE, penalty.factor )
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast_glmnet(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
# lasso -------------------------------------------------------------------
lambda_lasso = read.csv("results/lasso_lambda.csv") %>% .[1, 2]
fc_lasso = forecast_glmnet(y, x, idx = idx, lambda = lambda_lasso, alpha = 1)
# elastik net -------------------------------------------------------------
lambda_el = read.csv("results/el_lambda.csv") %>% .[1, 2]
fc_lasso = forecast_glmnet(y, x, idx = idx, lambda = lambda_el, alpha = 0.9)
fc_ridge
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast_glmnet(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
# lasso -------------------------------------------------------------------
lambda_lasso = read.csv("results/lasso_lambda.csv") %>% .[1, 2]
fc_lasso = forecast_glmnet(y, x, idx = idx, lambda = lambda_lasso, alpha = 1)
# elastik net -------------------------------------------------------------
lambda_el = read.csv("results/el_lambda.csv") %>% .[1, 2]
fc_el = forecast_glmnet(y, x, idx = idx, lambda = lambda_el, alpha = 0.9)
# plot --------------------------------------------------------------------
df = data.frame(fc_ridge, fc_lasso, fc_el, y = c(y[idx], y=[-c(1:idx)]))
# plot --------------------------------------------------------------------
df = data.frame(fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)]))
df
# plot --------------------------------------------------------------------
df = data.frame(date = as.Date(c(data_raw$dato[idx], data_raw$dato[-c(1:idx)])fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)]))
# plot --------------------------------------------------------------------
df = data.frame(date = as.Date(c(data_raw$dato[idx], data_raw$dato[-c(1:idx)]),
fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)])))
data_raw$dato[idx]
c(data_raw$dato[idx], data_raw$dato[-c(1:idx)])
# plot --------------------------------------------------------------------
dato = c(as.character(data_raw$dato[idx][1]), as.character(data_raw[-c(1:idx)]))
dato
as.character(data_raw[-c(1:idx)])
data_raw
# plot --------------------------------------------------------------------
dato = c(as.character(data_raw$dato[idx][1]), as.character(data_raw$dato[-c(1:idx)]))
dato
df = data.frame(date = as.Date(c(dato),
fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)])))
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)])))
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)]))
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)]))
df
ggplot(df, aes(date)) + geom_line(fc_ridge)
ggplot(df, aes(x = date)) + geom_line(y = fc_ridge)
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, y_test = c(y[idx], y[-c(1:idx)]))
ggplot(df, aes(x = date,)) + geom_line(y = fc_ridge)
ggplot(df, aes(x = date)) + geom_line(y = fc_ridge)
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)]))
ggplot(df, aes(x = date, y = y)) + geom_line(y = fc_ridge)
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed"))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge"))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Ridge"))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso"))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Lasso"))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net"))
source("../script/script_forecast_glmnet.R")
source("/script/script_forecast_glmnet.R")
source("script/script_forecast_glmnet.R")
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast_glmnet(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
# lasso -------------------------------------------------------------------
lambda_lasso = read.csv("results/lasso_lambda.csv") %>% .[1, 2]
fc_lasso = forecast_glmnet(y, x, idx = idx, lambda = lambda_lasso, alpha = 1)
# elastik net -------------------------------------------------------------
lambda_el = read.csv("results/el_lambda.csv") %>% .[1, 2]
fc_el = forecast_glmnet(y, x, idx = idx, lambda = lambda_el, alpha = 0.9)
# plot --------------------------------------------------------------------
dato = c(as.character(data_raw$dato[idx][1]), as.character(data_raw$dato[-c(1:idx)]))
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, y = c(y[idx], y[-c(1:idx)]))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net"))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net")) +
ylab("Rate") + xlab("Dato") +
scale_colour_manual(values = c("gray", "red", "blue", "green")) +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net")) +
ylab("Rate") + xlab("Dato") +
scale_colour_manual(values = c("gray", "", "", "")) +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net")) +
ylab("Rate") + xlab("Dato") +
scale_colour_manual(values = c("gray")) +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net")) +
ylab("Rate") + xlab("Dato") +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed", col = "gray")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net")) +
ylab("Rate") + xlab("Dato") +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net")) +
ylab("Rate") + xlab("Dato") +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
source("script/script_coordinate.R")
parm = function(x) {
(sum(x != 0))
}
data.frame(
lambda = c("min", "1se"),
lambda_val = c(gglasso_cv$lambda.min, gglasso_cv$lambda.1se),
error = with(gglasso_cv, c(cvm[which(lambda == gglasso_cv$lambda.min)], cvm[which(lambda == gglasso_cv$lambda.1se)])),
p = apply(coef(gglasso_fit , s = c(gglasso_cv$lambda.min, gglasso_cv$lambda.1se)), 2, parm)
)
c <- tidy(gglasso_cv$lambda.min)
write.csv(c, file = "results/grp_lambda.csv")
# group lasso -------------------------------------------------------------
lambda_el = read.csv("results/grp_lambda.csv") %>% .[1, 2]
library(tidyverse)
library(glmnet)
source("../data/setup_data.R")
drops = c("UNRATE")
x = scale(data[ , !(colnames(data) %in% drops)])
y = scale(data[, "UNRATE"], scale = FALSE)
library(gglasso)
?gglasso
forecast_gglasso = function(y, x, grp) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = gglasso(x_kov, y_res, grp)
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
grp <- c(1, 1, rep(4, 3), rep(1, 14), rep(2, 27), rep(3, 10), rep(4, 4),
rep(5, 10), rep(8, 4), rep(6, 21), rep(7, 20), rep(2, 3), rep(5, 4))
forecast_gglasso = function(y, x, grp) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = gglasso(x_kov, y_res, grp)
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
forecast_gglasso(y, x, grp)
gglasso(x, y, grp)
# group lasso -------------------------------------------------------------
lambda_grp = read.csv("results/grp_lambda.csv") %>% .[1, 2]
lambda_grp = read.csv("results/grp_lambda.csv") %>% .[1, 2]
forecast_gglasso = function(y, x, grp, lambda) {
fc = c(NA)
for(k in 0:length(y[-c(1:idx)])) {
y_res = y[1:(idx + k)] #y bliver opdateret med den observerede værdi for hvert k
x_kov = x[1:(idx + k), ] #tilføjede en ny række i hver iteration
fit = gglasso(x_kov, y_res, grp)
beta_hat = coef(fit, s = lambda) %>% .[-c(1),]
fc[k+1] = x[dim(x_kov)[1], ] %*% beta_hat #anvender sidste række i vores design matrice og ganger på beta_hat
}
print(fc)
}
forecast_gglasso(y, x, grp, lambda_grp)
source("script/script_forecast_glmnet.R")
source("script/script_forecast_gglasso.R")
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
fc_ridge = forecast_glmnet(y, x, idx = idx, lambda = lambda_ridge, alpha = 0)
# lasso -------------------------------------------------------------------
lambda_lasso = read.csv("results/lasso_lambda.csv") %>% .[1, 2]
fc_lasso = forecast_glmnet(y, x, idx = idx, lambda = lambda_lasso, alpha = 1)
# elastik net -------------------------------------------------------------
lambda_el = read.csv("results/el_lambda.csv") %>% .[1, 2]
fc_el = forecast_glmnet(y, x, idx = idx, lambda = lambda_el, alpha = 0.9)
# group lasso -------------------------------------------------------------
lambda_grp = read.csv("results/grp_lambda.csv") %>% .[1, 2]
fc_grp = forecast_gglasso(y, x, grp, lambda_grp)
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, fc_grp y = c(y[idx], y[-c(1:idx)]))
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, fc_grp, y = c(y[idx], y[-c(1:idx)]))
# plot --------------------------------------------------------------------
dato = c(as.character(data_raw$dato[idx][1]), as.character(data_raw$dato[-c(1:idx)]))
df = data.frame(date = as.Date(c(dato)),
fc_ridge, fc_lasso, fc_el, fc_grp, y = c(y[idx], y[-c(1:idx)]))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
geom_line(aes(y = fc_el, colour = "Elastik net")) +
geom_line(aes(y = fc_grp, colour = "Group lasso"))
ggplot(df, aes(x = date ))  +
geom_line(aes(y = y, colour = "Arbejdsløshed")) +
# geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
#geom_line(aes(y = fc_el, colour = "Elastik net")) +
geom_line(aes(y = fc_grp, colour = "Group lasso")) +
ylab("Rate") + xlab("Dato") +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
ggplot(df, aes(x = date ))  +
#geom_line(aes(y = y, colour = "Arbejdsløshed")) +
# geom_line(aes(y = fc_ridge, colour = "Ridge")) +
geom_line(aes(y = fc_lasso, colour = "Lasso")) +
#geom_line(aes(y = fc_el, colour = "Elastik net")) +
geom_line(aes(y = fc_grp, colour = "Group lasso")) +
ylab("Rate") + xlab("Dato") +
theme(legend.title=element_blank()) +
ggtitle("One-step-ahead forecast")
source("script/script_coordinate.R")
parm = function(x) {
(sum(x != 0))
}

beta
x_out %*% beta
pred = predict(lasso_fit, x_test)
x_test
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
#fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
#beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE, s = lambda_lasso)
pred = predict(fit_1, x_out)
#pred_test = x_out %*% beta
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
#fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
#intercept = FALSE, standardize=FALSE)
#beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE, s = lambda_lasso)
pred = predict(fit_1, x_out)
#pred_test = x_out %*% beta
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
w_size = length(y_train) - 100
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
#fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
#intercept = FALSE, standardize=FALSE)
#beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE, s = lambda_lasso)
pred = predict(fit_1, x_out)
#pred_test = x_out %*% beta
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
print(x_out)
# = Regression Model = #
#fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
#intercept = FALSE, standardize=FALSE)
#beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE, s = lambda_lasso)
pred = predict(fit_1, x_out)
#pred_test = x_out %*% beta
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
y
n = length(y_test)
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(idx + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(idx + i - 1)]
x_out = (x[idx + i, ])
# = Regression Model = #
#fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
#intercept = FALSE, standardize=FALSE)
#beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE, s = lambda_lasso)
pred = predict(fit_1, x_out)
#pred_test = x_out %*% beta
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(idx + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(idx + i - 1)]
x_out = (x[idx + i, ])
# = Regression Model = #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
#intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
#fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE, s = lambda_lasso)
#pred = predict(fit_1, x_out)
pred_test = x_out %*% beta
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(idx + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(idx + i - 1)]
x_out = (x[idx + i, ])
# = Regression Model = #
#fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
#intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
#fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE, s = lambda_lasso)
#pred = predict(fit_1, x_out)
pred_test = x_out %*% beta
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
# = Rolling Window Loop = #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(idx + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(idx + i - 1)]
x_out = (x[idx + i, ])
# = Regression Model = #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
pred_test = x_out %*% beta
#fit_1 = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
# intercept = FALSE, standardize=FALSE, s = lambda_lasso)
#pred = predict(fit_1, x_out)
# = Random Walk = #
#f2 = tail(X_in$infl0, 1)
return(pred_test)
}
forecast
forecasts
plot(forecasts, type = "l", col = "red", xlim = c(0, 140), ylim = c(-0.6, 0.6))
par(new = TRUE)
plot(y_test, type = "l", xlim = c(0, 140), ylim = c(-0.6, 0.6) )
w_size = idx
# = Rolling Window Loop forecast #
forecasts = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
plot(forecasts, type = "l", col = "red", xlim = c(0, 140), ylim = c(-0.6, 0.6))
par(new = TRUE)
plot(y_test, type = "l", xlim = c(0, 140), ylim = c(-0.6, 0.6) )
function(y, x, alpha, idx){
w_size = idx
n = length(y_test)
# = Rolling Window Loop forecast #
rolling_window_fc = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(rolling_window_fc)
}
rolling_window_fc = function(y, x, alpha, idx){
w_size = idx
n = length(y_test)
# = Rolling Window Loop forecast #
fc = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda_lasso) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
rolling_window_fc(y,x, 1, idx)
test = rolling_window_fc(y,x, 1, idx)
plot(test, type = "l", col = "red", xlim = c(0, 140), ylim = c(-0.6, 0.6))
par(new = TRUE)
plot(y_test, type = "l", xlim = c(0, 140), ylim = c(-0.6, 0.6) )
rolling_window_fc = function(y, x, alpha, idx, lambda ){
w_size = idx
n = length(y_test)
# = Rolling Window Loop forecast #
fc = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[i:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[i:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, idx = idx, lambda_lasso)
plot(test, type = "l", col = "red", xlim = c(0, 140), ylim = c(-0.6, 0.6))
par(new = TRUE)
plot(y_test, type = "l", xlim = c(0, 140), ylim = c(-0.6, 0.6) )
expanding_window_fc = function(y, x, alpha, idx, lambda ){
w_size = idx
n = length(y_test)
# = Rolling Window Loop forecast #
fc = foreach(i=1:n, .combine = rbind) %do%{
# = Select data for the window (in and out-of-sample) = #
x_in = x[1:(w_size + i - 1), ] # = change to X[1:(w_size + i - 1), ] for expanding window
y_res = y[1:(w_size + i - 1)]
x_out = (x[w_size + i, ])
# = Regression Model = #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = 1,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
expanding_window_fc(y, x, alpha = 1, idx = idx, lambda = lambda_lasso)
exp = expanding_window_fc(y, x, alpha = 1, idx = idx, lambda = lambda_lasso)
plot(exp, type = "l", col = "red", xlim = c(0, 140), ylim = c(-0.6, 0.6))
par(new = TRUE)
plot(y_test, type = "l", xlim = c(0, 140), ylim = c(-0.6, 0.6) )
plot(exp, type = "l", col = "red", xlim = c(0, 140), ylim = c(-0.6, 0.6))
par(new = TRUE)
plot(test,type = "l", col = "green", xlim = c(0, 140), ylim = c(-0.6, 0.6) )
expanding_window_fc = function(y, x, alpha, idx, lambda ){
n = length(y_test)
# = Rolling Window Loop forecast #
fc = foreach(i=1:n, .combine = rbind) %do%{
#expanding window
x_in = x[1:(idx + i - 1), ]
y_res = y[1:(idx + i - 1)]
x_out = x[idx + i, ]
# Regression Model #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
exp = expanding_window_fc(y, x, alpha = 1, idx = idx, lambda = lambda_lasso)
source("data_unrate.R")
library(glmnet)
drops = c("UNRATE")
x = scale(data[ , !(colnames(data) %in% drops)])
y = scale(data[, "UNRATE"], scale = FALSE)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, w_size = idx, alpha = 1, idx = idx, lambda_lasso)
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Expanding window forecast
expanding_window_fc = function(y, x, alpha, idx, lambda ){
n = length(y_test)
fc = foreach(i=1:n, .combine = rbind) %do%{
#expanding window
x_in = x[1:(idx + i - 1), ]
y_res = y[1:(idx + i - 1)]
x_out = x[idx + i, ]
# Regression Model #
fit = glmnet(x_in, y_res, family = "gaussian", alpha = alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
# ridge -------------------------------------------------------------------
lambda_ridge = read.csv("results/ridge_lambda.csv") %>% .[1, 2]
ridge_fit = glmnet(x_train, y_train, family = "gaussian", alpha = 0,
intercept = FALSE, standardize=FALSE, lambda = lambda_ridge)
# lasso -------------------------------------------------------------------
lambda_lasso = read.csv("results/lasso_lambda.csv") %>% .[1, 2]
lasso_fit = glmnet(x_train, y_train, family = "gaussian", alpha = 1,
intercept = FALSE, standardize = FALSE, lambda = lambda_lasso)
expanding_window_fc(y, x, alpha = 1, idx = idx, lambda = lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
print(n)
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
idx
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
print(x_in)
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
print(pred_test)
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
lambda_lasso
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
print(fit)
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
print(fit)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
print(y_res)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i=1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
print(y_res)
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
## Rolling window forecast
rolling_window_fc = function(y, x, alpha, w_size, lambda ){
n = length(y_test) # skal igennem data setup_data
fc = foreach(i = 1:n, .combine = rbind) %do%{
#Rolling window forecast
x_in = x[i:(w_size + i - 1), ]
y_res = y[i:(w_size + i - 1)]
x_out = x[w_size + i, ]
#Regression Model
fit = glmnet(x_in, y_res, family = "gaussian", alpha = alpha,
intercept = FALSE, standardize=FALSE)
beta = as.vector(coef(fit, s = lambda) %>% .[-c(1),])
pred_test = x_out %*% beta
return(pred_test)
}
print(fc)
}
test = rolling_window_fc(y, x, alpha = 1, w_size = idx, lambda_lasso)
y
y^t
tcrossprod(y)
crossprod(y)
tcrossprod(y)
crossprod(y)
?scale
y = scale(data[, "UNRATE"], scale = FALSE, center = TRUE)
crossprod(y)

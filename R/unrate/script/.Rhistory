Rcpp::compileAttributes()
devtools::document()
install.packages("p9", type = "source", repos = NULL)
install.packages("Quandl")
library(Quandl)
Quandl('FRED/SMU17169746056140001SA')
data = Quandl('FRED/SMU17169746056140001SA')
View(data)
data = Quandl('FRED/M1475AUSM027SNBR')
install.packages("Quandl")
install.packages("Quandl")
data
data = Quandl('FRED/CPIAUCSL')
data
data = Quandl('FRED/DFF')
data
head(data)
library(glmnet)
?glmnet
library(Quandl)
quandl.api(IP)
?quandl.api
quandl(FED/KW_B00001_S_Q)
Quandl(FED/KW_B00001_S_Q)
Quandl("FED/KW_B00001_S_Q")
Quandl("FED/KW_B00001_S_Q")
Quandl("FED/GDP")
Quandl("FRED/GDP")
Quandl("FRED/IP")
Quandl("FED/IP")
Quandl("FED/IPP")
Quandl("FED/IPF")
Quandl("FED/LHEL")
Quandl("FED/LHELX")
Quandl("FED/IP.IE")
Quandl.api_key("5QFwZ67csueGYWFnB_WW")
Quandl("FED/IP.IE")
Quandl("FRED/IP.IE")
Quandl("FED/KW_B00001_A")
Quandl("FED/IPS10")
Quandl("FED/IPIE")
Quandl("FRED/IPIE")
Quandl("FRED/IPMan")
Quandl("FRED/IPMAN")
IP.MAN = Quandl("FRED/IPMAN")
GDP = Quandl("FRED/GDP")
IP = Quandl("FRED/INDPRO")
IP.BE = Quandl("FRED/IPBUSEQ")
IP.CG
GDP = Quandl("FRED/GDP")
GDP
IP = Quandl("FRED/INDPRO")
IP
IP.Min = Quandl("FRED/IPG212SQ")
IP.Min
IP.CG = Quandl("FRED/IPB51000N")
IP.CG
IP.CG = Quandl("FRED/IPB51000S")
IP.MAN
IP.FP = Quandl("FRED/IPB50002N")
IP.FP
IP.IE
IP.IE = Quandl("FRED/IPB52131NQ")
IP.IE
IP
IP.CG
IP.Min = Quandl("FRED/IPG212NQ")
IP.BE = Quandl("FRED/IPBUSEQ")
IP.BE = Quandl("FRED/IPBUNEQ")
IP.BE = Quandl("FRED/IPBUNQ")
GDP = Quandl("FRED/GDP")
GDP
#Industrial Production Grwoth
library(Quandl)
GDP = Quandl("FRED/GDP")
IP = Quandl("FRED/INDPRO")
head(IP)
IPS10 = Quandl("FRED/IPB50001SQ")
CES003 = Quandl("FRED/CES0600000001") #NSA
##Interest Rates (PROCENT) (NSA)
FYFF = Quandl("FRED/FF") #NSA
FYFF
FYGM6 =  Quandl("FRED/TB6MS")
FYGM6
FYGT1 = Quanfl("FRED/TB1YS")
FYGT5 = Quandl("FRED/GS5")
##Interest Rates (PROCENT) (NSA) (MONTLY)
FYFF = Quandl("FRED/FEDFUNDS") #NSA
FYGM3 = Quandl("FRED/TB3MS") #NSA
FYGM6 =  Quandl("FRED/TB6MS") #NSA
FYGT1 = Quandl("FRED/GS1") #NSA
FYGT5 = Quandl("FRED/GS5") #NSA
FYG10 = Quandl("FRED/GS10") #NSA
FYAAAC =
FYBAAC =
## Interest Rates Differences
SFYGM6 = FYGM6$Value - FYGM3$Value
FYGM6$Value
FYAAAC =
FYBAAC =
## Interest Rates Differences
SFYGM6 = lenght(FYGM6$Value) - FYGM3$Value
FYAAAC =
FYBAAC =
## Interest Rates Differences
SFYGM6 = length(FYGM6$Value) - FYGM3$Value
length(FYGM6$Value)
length(FYGM3$Value)
FYGM3
library(Quandl)
GDP = Quandl("FRED/GDP")
IPS10 = Quandl("FRED/IPB50001SQ")
IPS11 =
IPS299 = Quandl("FRED/IPB50002SQ")
IPS12 = Quandl("FRED/IPB51000SQ")
IPS13 = Quandl("FRED/IPB51100SQ")
IPS18 = Quandl("FRED/IPB51200SQ")
IPS25 = Quandl("FRED/IPB52100SQ")
IPS32 = Quandl("FRED/IPB53000SQ")
IPS34 = Quandl("FRED/IPB53100SQ")
IPS38 = Quandl("FRED/IPB53200SQ")
IPS43 = Quandl("FRED/IPB00004SQ")
IPS307 = Quandl("FRED/IPB51222SQ")
IPS306 =Quandl("FRED/IPB51221SQ")
PMP =
UTL11 = Quandl("FRED/CAPB00004SQ")
PMP =
UTL11 = Quandl("FRED/CAPB00004SQ")
#PMP =
UTL11 = Quandl("FRED/CAPB00004SQ")
## (ALL) Employment (MONTHLY)
CES002 = Quandl("FRED/CEU0500000001") #NSA
CES003 = Quandl("FRED/CEU0600000001") #NSA
CES006 = Quandl("FRED/CES1021000001") #SA
CES011 = Quandl("FRED/USCONS") #SA
#CES015 =
CES017 = Quandl("FRED/DMANEMP") #SA
CES033 = Quandl("FRED/NDMANEMP") #SA
Quandl.api_key(5QFwZ67csueGYWFnB_WW)
Quandl.api_key("5QFwZ67csueGYWFnB_WW")
CES033 = Quandl("FRED/NDMANEMP") #SA
#CES046 =
CESO48 = Quandl("FRED/USTPU") #SA
CES049 = Quandl("FRED/USWTRADE") #SA
CES053 = Quandl("FRED/USTRADE") #SA
CES088 = Quandl("FRED/USFIRE") #SA
CES140 = Quandl("FRED/USGOVT") #SA
#LHEL =
#LHELX =
LHEM = Quandl("FRED/CLF16OV")
## Unenployment (MONTLY)
#LHUR =
LHU680 = Quandl("FRED/UEMPMEAN") #SA #Weeks
LHU5 =  Quandl("FRED/LNS13008397") #SA
LHU14 = Quandl("FRED/LNS13025701") #SA
LHU15 = Quandl("FRED/M08320USM156SNBR") #SA (målt i A Per Cent Of The Total Civilian Labor Force)
LHU26 = Quandl("FRED/LNS13025702") #SA
LHU27 = Quandl("FRED/LNS13025703") #SA
## Hours Starts and Sales (MONTLY) (Thousind of units)
HSBR = Quandl("FRED/HOUST") #Unit SA
#HSFR =
HSNE =  Quandl("FRED/HOUSTNE") #SA
HSMW = Quandl("FRED/HOUSTMW") #SA
HSSOU = Quandl("FRED/HOUSTS") #SA
HSWST = Quandl("FRED/HOUSTW") #SA
##Interest Rates (PROCENT) (NSA) (MONTLY)
FYFF = Quandl("FRED/FEDFUNDS") #NSA
FYGM3 = Quandl("FRED/TB3MS") #NSA
FYGM6 =  Quandl("FRED/TB6MS") #NSA
FYGT1 = Quandl("FRED/GS1") #NSA
FYGT5 = Quandl("FRED/GS5") #NSA
FYG10 = Quandl("FRED/GS10") #NSA
## Money and Credit Quantoty Aggregates
FM1 = Quandl("FRED/M1SL") #SA
MZMSL = Quandl("FRED/MZM") #SA
FM2 = Quandl("FRED/M2SL") #SA
#FMFBA =
FMRRA = Quandl("FRED/TOTRESNS") #NSA
BUSLOANS = Quandl("FRED/BUSLOANS") #SA
## Consumptions
#PI071 =
PI072 = Quandl("FRED/PCEDG") #SA
PI073 = Quandl("FRED/PCEND") #SA
PI074 = Quandl("FRED/PCES") #SA
## Exchange Rates
EXRUS = Quandl("FRED/EXUSEU") #NSA #
EXRSW = Quandl("FRED/EXSZUS") #NSA
EXRJAN = Quandl("FRED/EXJPUS") #NSA
EXRUK = Quandl("FRED/FXRATEGBA618NUPN") #årligt #NSA
EXRCAN = Quandl("FRED/EXCAUS") #NSA
## Hourly Earnings
CES275 = Quandl("FRED/CES0600000008")
Quandl("FEDFUNDS")
Quandl("FRED/FEDFUNDS")
source("/Users/trinegraff/Desktop/Projekt/R/data/setup_data.R")
library(lars)
library(ggplot2)
drops = c("UNRATE")
x = data_train[ , !(colnames(data_train) %in% drops)]
y = data$UNRATE[1:idx]
parm = function(x) {
(sum(x != 0))
}
set.seed(109)
library(elasticnet)
# lasso -------------------------------------------------------------------
lasso_fit = glmnet(x, y, family = "gaussian", alpha = 1, intercept = FALSE, standardize=FALSE)
library(glmnet)
# lasso -------------------------------------------------------------------
lasso_fit = glmnet(x, y, family = "gaussian", alpha = 1, intercept = FALSE, standardize=FALSE)
lasso_cv = cv.glmnet(x, y, intercept = FALSE, family = "gaussian", alpha = 1, standardize=FALSE)
lasso_cv$lambda
lambda_lars = lasso_cv$lambda
cv.enet(x, y, lambda = lambda_lars , alpha =0.2)
?sv.enet
?cv.enet
cv.enet(x, y, lambda = lambda_lars, s =0.2)
warnings()
# lasso -------------------------------------------------------------------
lars_cv = cv.lars(x, y, type = "lasso", intercept = FALSE, normalize = FALSE, trace = TRUE)
lambda_lars = lars_cv$index
cv.enet(x, y, lambda = lambda_lars, s =0.2)
min <- min(lars_cv$cv)
idmin = match(min, lars_cv$cv)
l1_min = lars_cv$index[idmin]
se = (lars_cv$cv + lars_cv$cv.error)[idmin]
idse = lars_cv$cv <= se #større eller lig med en standard afvigelse
l1.1se = max(lars_cv$index[idse], na.rm = TRUE)
l1.1se
match(l1.1se, lars_cv$cv)
match(l1.1se, lars_cv$index)
idse
data.frame(
lambda = c("min", "1se"),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min,, mode = "fraction")), parm(coef(lars_, s = l1.1sd,, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
lars_ = lars(x, y, type = "lasso")
data.frame(
lambda = c("min", "1se"),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min,, mode = "fraction")), parm(coef(lars_, s = l1.1sd,, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
l1_1se = max(lars_cv$index[idse], na.rm = TRUE)
data.frame(
lambda = c("min", "1se"),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min,, mode = "fraction")), parm(coef(lars_, s = l1_1sd,, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
data.frame(
lambda = c("min", "1se"),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min,, mode = "fraction")), parm(coef(lars_, s = l1_1sd,, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
data.frame(
lambda = c("min", "1se"),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min,, mode = "fraction")), parm(coef(lars_, s = l1_1se,, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
df_la = data.frame(lars_cv$index, lars_cv$cv, lars_cv$cv.error)
ggplot(df_la, aes(df_la$lars_cv.index,df_la$lars_cv.cv)) +
geom_errorbar(aes(ymin = df_la$lars_cv.cv + df_la$lars_cv.cv.error,
ymax = df_la$lars_cv.cv - df_la$lars_cv.cv.error, width = .1)) +
geom_point(col = "red") +
labs(x = "Fraktion af sidste L1 norm", y = "MSE", color = "") +
geom_vline(aes(xintercept= l1_min, col = "blue"), linetype="dotted") +
geom_vline(aes(xintercept= l1.1se, col = "brown"), linetype="dotted") +
ggtitle("Lasso") + scale_color_manual(labels = c(expression(lambda[min]), expression(lambda[1][sd])), values = c("blue", "brown"))
data.frame(
lambda = c("min", "1se"),
vaedi = c(l1_min, l1_1se),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min,, mode = "fraction")), parm(coef(lars_, s = l1_1se,, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
data.frame(
lambda = c("min", "1se"),
vaedi = c(l1_min, l1_1se),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min, mode = "fraction")), parm(coef(lars_, s = l1_1se, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
l1_1se
lars_cv$index
match(lars_cv$index, l1_1se)
data.frame(
lambda = c("min", "1se"),
vaedi = c(l1_min, l1_1se),
error = c(lars_cv$cv[idmin], lars_cv$cv[37]),
p = c(parm(coef(lars_, s = l1_min, mode = "fraction")), parm(coef(lars_, s = l1_1se, mode = "fraction")) )
#fraction fordi vi har L1 norm af vektoren (se plot)
)
gglasso
library(gglasso)
?gglasso()
?cv.glmnet
library(glmnet)
?cv.glmnet
?glmnet
# lasso -------------------------------------------------------------------
lasso_fit = glmnet(x, y, family = "gaussian", alpha = 1, intercept = FALSE, standardize=FALSE)
drops = c("UNRATE")
x = data_train[ , !(colnames(data_train) %in% drops)]
y = data$UNRATE[1:idx]
parm = function(x) {
(sum(x != 0))
}
# lasso -------------------------------------------------------------------
lasso_fit = glmnet(x, y, family = "gaussian", alpha = 1, intercept = FALSE, standardize=FALSE)
source("/Users/trinegraff/Desktop/Projekt/R/data/setup_data.R")
drops = c("UNRATE")
x = data_train[ , !(colnames(data_train) %in% drops)]
y = data$UNRATE[1:idx]
set.seed(1)
# lasso -------------------------------------------------------------------
lasso_fit = glmnet(x, y, family = "gaussian", alpha = 1, intercept = FALSE, standardize=FALSE)
lasso_cv = cv.glmnet(x, y, intercept = FALSE, family = "gaussian", alpha = 1, standardize=FALSE)
idmin = match(lasso_cv$lambda.min, lasso_cv$lambda)
lambda_1se = max(lasso_cv$lambda[idmin], na.rm = TRUE)
data.frame(
lambda = c("min", "1se"),
lambda_val = c(lasso_cv$lambda.min, lasso_cv$lambda.1se),
error = with(lasso_cv, c(cvm[which(lambda == lasso_cv$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(lasso_fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se)), 2, parm)
)
lasso_cv = cv.glmnet(x, y, intercept = FALSE, family = "gaussian", alpha = 1, standardize=FALSE)
idmin = match(lasso_cv$lambda.min, lasso_cv$lambda)
lambda_1se = max(lasso_cv$lambda[idmin], na.rm = TRUE)
data.frame(
lambda = c("min", "1se"),
lambda_val = c(lasso_cv$lambda.min, lasso_cv$lambda.1se),
error = with(lasso_cv, c(cvm[which(lambda == lasso_cv$lambda.min)], cvm[which(lambda == lasso_cv$lambda.1se)])),
p = apply(coef(lasso_fit, s = c(lasso_cv$lambda.min, lasso_cv$lambda.1se)), 2, parm)
)
source("/Users/trinegraff/Desktop/Projekt/R/data/setup_data.R")
library(tidyverse)
library(glmnet)
library(gglasso)
library(ggplot2)
library(gridExtra)
set.seed(1)
drops = c("UNRATE")
x = data_train[ , !(colnames(data_train) %in% drops)]
y = data$UNRATE[1:idx]
lasso_fit = glmnet(x, y, family = "gaussian", alpha = 1, intercept = FALSE, standardize=FALSE)
lasso_cv = cv.glmnet(x, y, intercept = FALSE, family = "gaussian", alpha = 1, standardize=FALSE)
ridge_fit = glmnet(x, y, family = "gaussian", alpha = 0, intercept = FALSE, standardize=FALSE)
ridge_cv = cv.glmnet(x, y, intercept = FALSE, family = "gaussian", alpha = 0, standardize=FALSE)
alpha.grid = seq(0.1, 0.9, length = 10)
for (i in alpha.grid) {
assign(paste("fit",i , sep=""), cv.glmnet(x, y, alpha=i,family="gaussian", standardize=FALSE))
}
grp <- c(1, 1, rep(4, 3), rep(1, 14), rep(2, 27), rep(3, 10), rep(4, 4),
rep(5, 10), rep(8, 4), rep(6, 21), rep(7, 20), rep(2, 3), rep(5, 4))
gglasso_cv <- cv.gglasso(x, y, group = grp, nfold = 10, intercept = FALSE, standardize=FALSE)
gglasso_fit = gglasso(x, y, group = grp, intercept = FALSE, standardize=FALSE)
?cv.gglasso
?gglasso
gglasso_cv <- cv.gglasso(x, y, group = grp, nfold = 10, intercept = FALSE, loss = "ls" )
gglasso_cv
gglasso_fit = gglasso(x, y, group = grp, intercept = FALSE, loss = "ls")
setwd("~/Desktop/Projekt/R/unrate/script")
source("/Users/trinegraff/Desktop/Projekt/R/unrate/script/script.R")
